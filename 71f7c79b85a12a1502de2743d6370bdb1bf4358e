{
  "comments": [
    {
      "key": {
        "uuid": "3a65312a_efc9ba5b",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-10-28T14:01:09Z",
      "side": 1,
      "message": "It\u0027s better to make this Serializable and use writeReplace to delegate to an internal Externalizable Proxy class (my previous comment links to an example of this). The main advantage of this is that it allows for much easier versioning in case this class changes its serialized format - you create a new Externalizable Proxy class and maintain backwards compatibility with the old one. The other advantage is mainly cosmetic - you don\u0027t need a public no-arg ctor on this class and readExternal/writeExternal aren\u0027t exposed publicly.",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_c0f3e408",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 6439
      },
      "writtenOn": "2016-11-02T10:06:28Z",
      "side": 1,
      "message": "I cannot get it. Do you mean that it is better to have for objects which we want to serialize with externalizable own class? And then use simply serializable, with externalizable objects? Because in presented link I cannot see any advantage.\nSimilarly as in NormalizedNodeMessage, I can write SchemaPathMessage and in InvokeRPCMessage I can use Serializable with both messages. This is better solution in my opinion: with reusable objects for serialization not with private inner Proxy class.",
      "parentUuid": "3a65312a_efc9ba5b",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_0072fc7b",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 6439
      },
      "writtenOn": "2016-11-02T10:15:17Z",
      "side": 1,
      "message": "Something similar I introduced in next patch in the chain:\nhttps://git.opendaylight.org/gerrit/#/c/47676/2\nDue to re-usability of this object I had to refactor it. You can look on it.",
      "parentUuid": "3a65312a_c0f3e408",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_2069f88b",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 6439
      },
      "writtenOn": "2016-11-02T10:18:40Z",
      "side": 1,
      "message": "But SchemaPathMessage is not externalizable, this patch I created before i read this review. :) But the idea is the same.",
      "parentUuid": "3a65312a_0072fc7b",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_2003b810",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-02T12:19:14Z",
      "side": 1,
      "message": "The Externalizable proxy pattern allows for easier versioning. Plus a public  no-arg ctor isn\u0027t exposed along with the readExternal/writeExternal methods. Robert introduced this pattern in CDS and I\u0027m an advocate.",
      "parentUuid": "3a65312a_2069f88b",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_cfc67e49",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessageReply.java",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-10-28T14:01:09Z",
      "side": 1,
      "message": "See comment in InvokeRpcMessage.",
      "revId": "71f7c79b85a12a1502de2743d6370bdb1bf4358e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}