/*
 * Copyright (c) 2017 Pantheon Technologies s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.netconf.topology.singleton.impl.tx;

import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.util.Timeout;
import com.google.common.util.concurrent.CheckedFuture;
import com.google.common.util.concurrent.ListenableFuture;
import org.opendaylight.controller.md.sal.common.api.TransactionStatus;
import org.opendaylight.controller.md.sal.common.api.data.LogicalDatastoreType;
import org.opendaylight.controller.md.sal.common.api.data.TransactionCommitFailedException;
import org.opendaylight.controller.md.sal.dom.api.DOMDataWriteTransaction;
import org.opendaylight.netconf.sal.connect.util.RemoteDeviceId;
import org.opendaylight.yangtools.yang.common.RpcResult;
import org.opendaylight.yangtools.yang.data.api.YangInstanceIdentifier;
import org.opendaylight.yangtools.yang.data.api.schema.NormalizedNode;

/**
 * ProxyWriteTransaction uses provided {@link ActorRef} to delegate method calls to master
 * {@link org.opendaylight.netconf.topology.singleton.impl.actors.WriteTransactionActor}.
 */
public class ProxyWriteTransaction implements DOMDataWriteTransaction {

    private final ProxyWriteAdapter proxyWriteAdapter;

    /**
     * @param masterTxActor {@link org.opendaylight.netconf.topology.singleton.impl.actors.WriteTransactionActor} ref
     * @param id            device id
     * @param actorSystem   system
     * @param askTimeout    ask timeout
     */
    public ProxyWriteTransaction(final ActorRef masterTxActor, final RemoteDeviceId id, final ActorSystem actorSystem,
                                 final Timeout askTimeout) {
        proxyWriteAdapter = new ProxyWriteAdapter(masterTxActor, id, actorSystem, askTimeout);
    }

    @Override
    public boolean cancel() {
<<<<<<< 50351b4cb37a1998cfaef53ff584aeb767c25f50
        return proxyWriteAdapter.cancel();
=======
        if (!opened.compareAndSet(true, false)) {
            LOG.error("{} Transaction is already cancelled", id);
            return false;
        }
        final Future<Object> cancelScalaFuture =
                Patterns.ask(masterTxActor, new CancelRequest(), askTimeout);

        LOG.trace("{}: Cancel {} via NETCONF", id);

        try {
            // here must be Await because AsyncWriteTransaction do not return future
            return (boolean) Await.result(cancelScalaFuture, askTimeout.duration());
        } catch (final Exception e) {
            LOG.error("{} Exception during cancel", id);
            LOG.error("Cause: ", e);
            return false;
        }
>>>>>>> Improve logging in ProxyWriteTransaction
    }

    @Override
    public CheckedFuture<Void, TransactionCommitFailedException> submit() {
        return proxyWriteAdapter.submit(getIdentifier());
    }

    @Override
    public ListenableFuture<RpcResult<TransactionStatus>> commit() {
        return proxyWriteAdapter.commit(getIdentifier());
    }

    @Override
    public void delete(final LogicalDatastoreType store, final YangInstanceIdentifier identifier) {
        proxyWriteAdapter.delete(store, identifier);
    }

    @Override
    public void put(final LogicalDatastoreType store, final YangInstanceIdentifier identifier,
                    final NormalizedNode<?, ?> data) {
        proxyWriteAdapter.put(store, identifier, data, getIdentifier());
    }

    @Override
    public void merge(final LogicalDatastoreType store, final YangInstanceIdentifier identifier,
                      final NormalizedNode<?, ?> data) {
        proxyWriteAdapter.merge(store, identifier, data, getIdentifier());
    }

    @Override
    public Object getIdentifier() {
        return this;
    }
}
