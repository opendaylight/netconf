{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6dbbf825_e5d147b5",
        "filename": "protocol/restconf-server-spi/src/main/java/org/opendaylight/restconf/server/spi/AbstractRestconfStreamRegistry.java",
        "patchSetId": 15
      },
      "lineNbr": 342,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-05-22T06:42:24Z",
      "side": 1,
      "message": "Is this bale to work or not?",
      "revId": "1576c39462c466b8ab3f7fc7af2434546119ab9c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a9acab1_2a765b6d",
        "filename": "protocol/restconf-server-spi/src/main/java/org/opendaylight/restconf/server/spi/AbstractRestconfStreamRegistry.java",
        "patchSetId": 15
      },
      "lineNbr": 342,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-05-22T08:41:45Z",
      "side": 1,
      "message": "This will work if subscribed to DOMNotifications. I commented it out for now because of possibility of subscription to data tree change which will lead to cast type exception. This means I can\u0027t depend on formatter inside subscribers and have to create separate one for state notifications. Currently there are two ways to do it - \n1)reuse one we already have(and it works) - inside restconf.mdsal.spi.NotificationSource or \n2)create one(but it will be copy/paste on 99%).\nFirst approach has one issue with circular dependency meaning those should be moved to restconf-server-spi.",
      "parentUuid": "6dbbf825_e5d147b5",
      "revId": "1576c39462c466b8ab3f7fc7af2434546119ab9c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4388452c_4129e103",
        "filename": "protocol/restconf-server-spi/src/main/java/org/opendaylight/restconf/server/spi/AbstractRestconfStreamRegistry.java",
        "patchSetId": 15
      },
      "lineNbr": 342,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-05-22T08:44:10Z",
      "side": 1,
      "message": "Also there is always other way but I did bot consider it because it involves exposing receivers collection to be able sendMessage to them outside of subscription class.",
      "parentUuid": "6a9acab1_2a765b6d",
      "revId": "1576c39462c466b8ab3f7fc7af2434546119ab9c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote is required for the \u0027Code-Review\u0027 label. \t\t\tA minumum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1576c39462c466b8ab3f7fc7af2434546119ab9c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ODL Required.GHA\u0027 and one other CI or committer is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,count\u003e\u003d2 AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,count>=2 AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Verified=MIN"],"failingAtoms":["label:Verified=MAX,count>=2"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1576c39462c466b8ab3f7fc7af2434546119ab9c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}