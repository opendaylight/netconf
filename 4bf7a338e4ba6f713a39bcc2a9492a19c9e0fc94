{
  "comments": [
    {
      "key": {
        "uuid": "3a65312a_e66ef5c8",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-03T12:34:12Z",
      "side": 1,
      "message": "So you regressed back to what you had originally and what started the discussion serialization, i.e. using normal, heavy-weight java serialization which is inefficient. You used the Externalizable proxy pattern in SchemaPathMessage, why not here?",
      "revId": "4bf7a338e4ba6f713a39bcc2a9492a19c9e0fc94",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_c69e5956",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 6439
      },
      "writtenOn": "2016-11-03T13:54:15Z",
      "side": 1,
      "message": "No, both of the fields are serialized like Externalizable. \nIf this fields are serialized with Externalizable why it is inefficient? I only reuse things. This is exactly what is done in Externalizable Pattern in way: public class is serialializable, inner class is externalizable.",
      "parentUuid": "3a65312a_e66ef5c8",
      "revId": "4bf7a338e4ba6f713a39bcc2a9492a19c9e0fc94",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_c649398d",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-03T14:36:28Z",
      "side": 1,
      "message": "The inefficiency is with the Serializable class itself, not whether or not its field are  Externalizable. Normal java serialization serializes class information, including class hierarchy and field info. This makes it very flexible to handle changes to the class but also adds a lot of bloat. Externalizable was added to avoid this. However making the class directly implement Externalizable has disadvantages that I outlined earlier. The Externalizable proxy pattern alleviates those disadvantages with the added benefit of easier versioning and backwards/forwards compatibility if the class should change.",
      "parentUuid": "3a65312a_c69e5956",
      "revId": "4bf7a338e4ba6f713a39bcc2a9492a19c9e0fc94",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_3ef62dd8",
        "filename": "netconf/netconf-topology-singleton/src/main/java/org/opendaylight/netconf/topology/singleton/messages/rpc/InvokeRpcMessage.java",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 6439
      },
      "writtenOn": "2016-11-04T13:59:27Z",
      "side": 1,
      "message": "Yes, it is substantial if fields are Externalizable or not. If serialization hit object which is externalizable, then it is serialized in externalizable way \u003d no bloat, no slow recursive strategy, which creates object tree etc what you mention. This approach in comparing with using Externalizable Pattern must be equally effective. \n\nFor example, on the other hand if writeExternal hit object which is serializable, then it is serialized with ineffective way and does not matter if we use externalizable. Both are related and we can combine it, what gives different efficiency.\n\nI do not want say that this pattern do not have benefits, I only want to mention that implement everywhere this pattern (e. g. externalizable externalizable) is also not good and add lot of unnecessary code.",
      "parentUuid": "3a65312a_c649398d",
      "revId": "4bf7a338e4ba6f713a39bcc2a9492a19c9e0fc94",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}