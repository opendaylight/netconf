<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2017 Inocybe Technologies Inc. and others.  All rights reserved.

 This program and the accompanying materials are made available under the
 terms of the Eclipse Public License v1.0 which accompanies this distribution,
 and is available at http://www.eclipse.org/legal/epl-v10.html
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:odl="http://opendaylight.org/xmlns/blueprint/v1.0.0"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.4.0"
           odl:use-default-for-reference-types="true">

  <!-- Restconf providers -->

  <cm:property-placeholder persistent-id="org.opendaylight.restconf" update-strategy="reload">
    <cm:default-properties>
      <cm:property name="websocket-address" value="0.0.0.0"/>
      <cm:property name="websocket-port" value="8185"/>
    </cm:default-properties>
  </cm:property-placeholder>

  <!--
    This cfg file defines the type of the DOMDataBroker service to use. 'default' indicates to use
    the default DOMDataBroker provided by MD-SAL. This setting is useful for providing a custom
    DOMDataBroker implementation that does, e.g., validation or additional security checking on
    top of the default DOMDataBroker.
  -->
  <cm:property-placeholder persistent-id="org.opendaylight.restconf.databroker"
        placeholder-prefix = "@{" placeholder-suffix = "}" update-strategy="reload">
    <cm:default-properties>
      <cm:property name="databroker-service-type" value="default"/>
    </cm:default-properties>
  </cm:property-placeholder>

  <reference id="schemaService" interface="org.opendaylight.controller.sal.core.api.model.SchemaService"/>
  <reference id="domRpcService" interface="org.opendaylight.controller.md.sal.dom.api.DOMRpcService"/>
  <reference id="domMountPointService" interface="org.opendaylight.controller.md.sal.dom.api.DOMMountPointService"/>
  <reference id="domNotificationService" interface="org.opendaylight.controller.md.sal.dom.api.DOMNotificationService"/>
  <reference id="domDataBroker" interface="org.opendaylight.controller.md.sal.dom.api.DOMDataBroker"
          ext:filter="(type=@{databroker-service-type})"/>
  <reference id="domSchemaService" interface="org.opendaylight.mdsal.dom.api.DOMSchemaService"/>

  <bean id="webSocketPort" class="org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.PortNumber">
    <argument value="${websocket-port}"/>
  </bean>

  <bean id="webSocketAddress" class="org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev130715.IpAddress">
    <argument value="${websocket-address}"/>
  </bean>

  <bean id="controllerContext" class="org.opendaylight.netconf.sal.restconf.impl.ControllerContext"
      factory-method="newInstance" destroy-method="close">
    <argument ref="schemaService"/>
    <argument ref="domMountPointService"/>
    <argument ref="domSchemaService"/>
  </bean>

  <bean id="brokerFacade" class="org.opendaylight.netconf.sal.restconf.impl.BrokerFacade"
      factory-method="newInstance" destroy-method="close">
    <argument ref="domRpcService"/>
    <argument ref="domDataBroker"/>
    <argument ref="domNotificationService"/>
    <argument ref="controllerContext"/>
  </bean>

  <bean id="restconfImpl" class="org.opendaylight.netconf.sal.restconf.impl.RestconfImpl"
      factory-method="newInstance">
    <argument ref="brokerFacade"/>
    <argument ref="controllerContext"/>
  </bean>

  <bean id="statsServiceWrapper" class="org.opendaylight.netconf.sal.restconf.impl.StatisticsRestconfServiceWrapper"
      factory-method="newInstance">
    <argument ref="restconfImpl"/>
  </bean>

  <bean id="restconfProviderDraft02" class="org.opendaylight.netconf.sal.restconf.impl.RestconfProviderImpl"
          init-method="start" destroy-method="close">
    <argument ref="statsServiceWrapper"/>
    <argument ref="webSocketAddress"/>
    <argument ref="webSocketPort"/>
  </bean>

  <bean id="restconfApplication" class="org.opendaylight.netconf.sal.rest.impl.RestconfApplication">
    <argument ref="controllerContext"/>
    <argument ref="brokerFacade"/>
    <argument ref="statsServiceWrapper"/>
  </bean>

  <!-- JSONRestconfService -->
  <bean id="jsonRestconfServiceDraft02"
      class="org.opendaylight.netconf.sal.restconf.impl.JSONRestconfServiceImpl"
      destroy-method="close">
    <argument ref="controllerContext"/>
    <argument ref="restconfImpl"/>
  </bean>

  <service ref="jsonRestconfServiceDraft02" odl:type="default"
      interface="org.opendaylight.netconf.sal.restconf.api.JSONRestconfService" />

  <!-- Bierman02WebRegistrar -->

  <reference id="customFilterAdapterConfig"
      interface="org.opendaylight.aaa.filterchain.configuration.CustomFilterAdapterConfiguration"/>

  <reference id="webServer" interface="org.opendaylight.aaa.web.WebServer" />

  <reference id="webContextSecurer" interface="org.opendaylight.aaa.web.WebContextSecurer" />

  <reference id="servletSupport" interface="org.opendaylight.aaa.web.servlet.ServletSupport" />

  <bean id="webRegistrar" class="org.opendaylight.netconf.sal.restconf.web.Bierman02WebRegistrarImpl"
          destroy-method="close">
    <argument ref="webServer"/>
    <argument ref="webContextSecurer"/>
    <argument ref="servletSupport"/>
    <argument ref="restconfApplication"/>
    <argument ref="customFilterAdapterConfig"/>
  </bean>

  <service ref="webRegistrar"
      interface="org.opendaylight.netconf.sal.restconf.web.Bierman02WebRegistrar" />

</blueprint>
