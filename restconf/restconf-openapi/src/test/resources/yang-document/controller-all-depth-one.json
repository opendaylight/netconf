{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Controller modules of RESTCONF",
    "description": "We are providing full API for configurational data which can be edited (by POST, PUT, PATCH and DELETE).\nFor operational data we only provide GET API.\n\nFor majority of request you can see only config data in examples. That's because we can show only one example\nper request. The exception when you can see operational data in example is when data are representing\noperational (config false) container with no config data in it."
  },
  "servers": [
    {
      "url": "http://localhost:8181/"
    }
  ],
  "paths": {
    "/rests/data": {
      "post": {
        "description": "\n\nNote:\nIn example payload, you can see only the first data node child of the resource to be created, following the\nguidelines of RFC 8040, which allows us to create only one resource in POST request.\n",
        "summary": "POST - Controller - action-types - action-types",
        "requestBody": {
          "description": "list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/action-types_list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "Controller root"
        ],
        "parameters": []
      },
      "get": {
        "description": "Queries the config (startup) datastore on the mounted hosted.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "GET - Controller - datastore - data",
        "tags": [
          "Controller root"
        ]
      }
    },
    "/rests/operations": {
      "get": {
        "description": "Queries the available operations (RPC calls) on the mounted hosted.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "GET - Controller - datastore - operations",
        "tags": [
          "Controller root"
        ]
      }
    },
    "/rests/data/action-types:list={name}": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - list",
        "requestBody": {
          "description": "list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/action-types_list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - list",
        "requestBody": {
          "description": "list",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/action-types_list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - list",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - list",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_list"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action-types_list",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/action-types:list={name}/list-action": {
      "post": {
        "description": "",
        "summary": "POST - Controller - action-types - list-action",
        "requestBody": {
          "description": "list-action_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/action-types_list_list-action_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_list_list-action_input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC list-action success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_list_list-action_output"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_list_list-action_output"
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/action-types:container": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - container",
        "requestBody": {
          "description": "container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:container": {
                    "$ref": "#/components/schemas/action-types_container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - container",
        "requestBody": {
          "description": "container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:container": {
                    "$ref": "#/components/schemas/action-types_container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "container": {
                      "$ref": "#/components/schemas/action-types_container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/action-types:container/container-action": {
      "post": {
        "description": "",
        "summary": "POST - Controller - action-types - container-action",
        "requestBody": {
          "description": "container-action_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/action-types_container_container-action_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_container_container-action_input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC container-action success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_container_container-action_output"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_container_container-action_output"
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      }
    },
    "/rests/data/action-types:multi-container": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - multi-container",
        "requestBody": {
          "description": "multi-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:multi-container": {
                    "$ref": "#/components/schemas/action-types_multi-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_multi-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - multi-container",
        "requestBody": {
          "description": "multi-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:multi-container": {
                    "$ref": "#/components/schemas/action-types_multi-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_multi-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - multi-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - multi-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_multi-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "multi-container": {
                      "$ref": "#/components/schemas/action-types_multi-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/action-types:first-container": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - first-container",
        "requestBody": {
          "description": "first-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:first-container": {
                    "$ref": "#/components/schemas/action-types_first-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_first-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - first-container",
        "requestBody": {
          "description": "first-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:first-container": {
                    "$ref": "#/components/schemas/action-types_first-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_first-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - first-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - first-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_first-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "first-container": {
                      "$ref": "#/components/schemas/action-types_first-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/action-types:nc-list={nc-name}": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - nc-list",
        "requestBody": {
          "description": "nc-list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:nc-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/action-types_nc-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "nc-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - nc-list",
        "requestBody": {
          "description": "nc-list",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:nc-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/action-types_nc-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "nc-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - nc-list",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "nc-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - nc-list",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-list"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "nc-list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action-types_nc-list",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "nc-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/action-types:nc-list={nc-name}/nc-list-action": {
      "post": {
        "description": "",
        "summary": "POST - Controller - action-types - nc-list-action",
        "requestBody": {
          "description": "nc-list-action_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/action-types_nc-list_nc-list-action_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-list_nc-list-action_input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC nc-list-action success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-list_nc-list-action_output"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-list_nc-list-action_output"
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "nc-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/action-types:nc-container": {
      "put": {
        "description": "",
        "summary": "PUT - action-types - Controller - nc-container",
        "requestBody": {
          "description": "nc-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action-types:nc-container": {
                    "$ref": "#/components/schemas/action-types_nc-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - action-types - Controller - nc-container",
        "requestBody": {
          "description": "nc-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "action-types:nc-container": {
                    "$ref": "#/components/schemas/action-types_nc-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - action-types - nc-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - action-types - nc-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "nc-container": {
                      "$ref": "#/components/schemas/action-types_nc-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/action-types:nc-container/nc-container-action": {
      "post": {
        "description": "",
        "summary": "POST - Controller - action-types - nc-container-action",
        "requestBody": {
          "description": "nc-container-action_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/action-types_nc-container_nc-container-action_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/action-types_nc-container_nc-container-action_input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC nc-container-action success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-container_nc-container-action_output"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/action-types_nc-container_nc-container-action_output"
                }
              }
            }
          }
        },
        "tags": [
          "Controller action-types"
        ],
        "parameters": []
      }
    },
    "/rests/data/choice-test:first-container": {
      "put": {
        "description": "",
        "summary": "PUT - choice-test - Controller - first-container",
        "requestBody": {
          "description": "first-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "choice-test:first-container": {
                    "$ref": "#/components/schemas/choice-test_first-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/choice-test_first-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - choice-test - Controller - first-container",
        "requestBody": {
          "description": "first-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "choice-test:first-container": {
                    "$ref": "#/components/schemas/choice-test_first-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/choice-test_first-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - choice-test - first-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - choice-test - first-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/choice-test_first-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "first-container": {
                      "$ref": "#/components/schemas/choice-test_first-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/choice-test:second-container": {
      "put": {
        "description": "",
        "summary": "PUT - choice-test - Controller - second-container",
        "requestBody": {
          "description": "second-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "choice-test:second-container": {
                    "$ref": "#/components/schemas/choice-test_second-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/choice-test_second-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - choice-test - Controller - second-container",
        "requestBody": {
          "description": "second-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "choice-test:second-container": {
                    "$ref": "#/components/schemas/choice-test_second-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/choice-test_second-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - choice-test - second-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - choice-test - second-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/choice-test_second-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "second-container": {
                      "$ref": "#/components/schemas/choice-test_second-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller choice-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/definition-test:binary-container": {
      "put": {
        "description": "",
        "summary": "PUT - definition-test - Controller - binary-container",
        "requestBody": {
          "description": "binary-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition-test:binary-container": {
                    "$ref": "#/components/schemas/definition-test_binary-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_binary-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - definition-test - Controller - binary-container",
        "requestBody": {
          "description": "binary-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "definition-test:binary-container": {
                    "$ref": "#/components/schemas/definition-test_binary-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_binary-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - definition-test - binary-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - definition-test - binary-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/definition-test_binary-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "binary-container": {
                      "$ref": "#/components/schemas/definition-test_binary-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/definition-test:union-container": {
      "put": {
        "description": "",
        "summary": "PUT - definition-test - Controller - union-container",
        "requestBody": {
          "description": "union-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition-test:union-container": {
                    "$ref": "#/components/schemas/definition-test_union-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_union-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - definition-test - Controller - union-container",
        "requestBody": {
          "description": "union-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "definition-test:union-container": {
                    "$ref": "#/components/schemas/definition-test_union-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_union-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - definition-test - union-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - definition-test - union-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/definition-test_union-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "union-container": {
                      "$ref": "#/components/schemas/definition-test_union-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/definition-test:number-container": {
      "put": {
        "description": "",
        "summary": "PUT - definition-test - Controller - number-container",
        "requestBody": {
          "description": "number-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition-test:number-container": {
                    "$ref": "#/components/schemas/definition-test_number-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_number-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - definition-test - Controller - number-container",
        "requestBody": {
          "description": "number-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "definition-test:number-container": {
                    "$ref": "#/components/schemas/definition-test_number-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_number-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - definition-test - number-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - definition-test - number-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/definition-test_number-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "number-container": {
                      "$ref": "#/components/schemas/definition-test_number-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/definition-test:enum-container": {
      "put": {
        "description": "",
        "summary": "PUT - definition-test - Controller - enum-container",
        "requestBody": {
          "description": "enum-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition-test:enum-container": {
                    "$ref": "#/components/schemas/definition-test_enum-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_enum-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - definition-test - Controller - enum-container",
        "requestBody": {
          "description": "enum-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "definition-test:enum-container": {
                    "$ref": "#/components/schemas/definition-test_enum-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_enum-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - definition-test - enum-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - definition-test - enum-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/definition-test_enum-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "enum-container": {
                      "$ref": "#/components/schemas/definition-test_enum-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/definition-test:network-container": {
      "put": {
        "description": "",
        "summary": "PUT - definition-test - Controller - network-container",
        "requestBody": {
          "description": "network-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition-test:network-container": {
                    "$ref": "#/components/schemas/definition-test_network-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_network-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - definition-test - Controller - network-container",
        "requestBody": {
          "description": "network-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "definition-test:network-container": {
                    "$ref": "#/components/schemas/definition-test_network-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/definition-test_network-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - definition-test - network-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - definition-test - network-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/definition-test_network-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "network-container": {
                      "$ref": "#/components/schemas/definition-test_network-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller definition-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/duplication-test:test-rpc": {
      "post": {
        "description": "",
        "summary": "POST - Controller - duplication-test - test-rpc",
        "requestBody": {
          "description": "test-rpc_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/duplication-test_test-rpc_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/duplication-test_test-rpc_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC test-rpc success"
          }
        },
        "tags": [
          "Controller duplication-test"
        ],
        "parameters": []
      }
    },
    "/rests/operations/duplication-test:test-rpc2": {
      "post": {
        "description": "",
        "summary": "POST - Controller - duplication-test - test-rpc2",
        "requestBody": {
          "description": "test-rpc2_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/duplication-test_test-rpc2_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/duplication-test_test-rpc2_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC test-rpc2 success"
          }
        },
        "tags": [
          "Controller duplication-test"
        ],
        "parameters": []
      }
    },
    "/rests/operations/duplication-test:test-rpc3": {
      "post": {
        "description": "",
        "summary": "POST - Controller - duplication-test - test-rpc3",
        "requestBody": {
          "description": "test-rpc3_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/duplication-test_test-rpc3_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/duplication-test_test-rpc3_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC test-rpc3 success"
          }
        },
        "tags": [
          "Controller duplication-test"
        ],
        "parameters": []
      }
    },
    "/rests/data/mandatory-test:root-container": {
      "put": {
        "description": "",
        "summary": "PUT - mandatory-test - Controller - root-container",
        "requestBody": {
          "description": "root-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-container": {
                    "$ref": "#/components/schemas/mandatory-test_root-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - mandatory-test - Controller - root-container",
        "requestBody": {
          "description": "root-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-container": {
                    "$ref": "#/components/schemas/mandatory-test_root-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - mandatory-test - root-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - mandatory-test - root-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/mandatory-test_root-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-container": {
                      "$ref": "#/components/schemas/mandatory-test_root-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/mandatory-test:root-optional-list={id}": {
      "put": {
        "description": "",
        "summary": "PUT - mandatory-test - Controller - root-optional-list",
        "requestBody": {
          "description": "root-optional-list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-optional-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mandatory-test_root-optional-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-optional-list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "patch": {
        "description": "",
        "summary": "PATCH - mandatory-test - Controller - root-optional-list",
        "requestBody": {
          "description": "root-optional-list",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-optional-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mandatory-test_root-optional-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-optional-list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - mandatory-test - root-optional-list",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - mandatory-test - root-optional-list",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/mandatory-test_root-optional-list"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-optional-list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/mandatory-test_root-optional-list",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/mandatory-test:root-mandatory-list={id}": {
      "put": {
        "description": "",
        "summary": "PUT - mandatory-test - Controller - root-mandatory-list",
        "requestBody": {
          "description": "root-mandatory-list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-mandatory-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mandatory-test_root-mandatory-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-mandatory-list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "patch": {
        "description": "",
        "summary": "PATCH - mandatory-test - Controller - root-mandatory-list",
        "requestBody": {
          "description": "root-mandatory-list",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "mandatory-test:root-mandatory-list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mandatory-test_root-mandatory-list",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/mandatory-test_root-mandatory-list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - mandatory-test - root-mandatory-list",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - mandatory-test - root-mandatory-list",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/mandatory-test_root-mandatory-list"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-mandatory-list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/mandatory-test_root-mandatory-list",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller mandatory-test"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/my-yang:data": {
      "put": {
        "description": "",
        "summary": "PUT - my-yang - Controller - data",
        "requestBody": {
          "description": "data",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "my-yang:data": {
                    "$ref": "#/components/schemas/my-yang_data",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/my-yang_data"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller my-yang"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - my-yang - Controller - data",
        "requestBody": {
          "description": "data",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "my-yang:data": {
                    "$ref": "#/components/schemas/my-yang_data",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/my-yang_data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller my-yang"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - my-yang - data",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller my-yang"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - my-yang - data",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/my-yang_data"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/my-yang_data",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller my-yang"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/path-params-test:cont": {
      "put": {
        "description": "",
        "summary": "PUT - path-params-test - Controller - cont",
        "requestBody": {
          "description": "cont",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "path-params-test:cont": {
                    "$ref": "#/components/schemas/path-params-test_cont",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/path-params-test_cont"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller path-params-test"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - path-params-test - Controller - cont",
        "requestBody": {
          "description": "cont",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "path-params-test:cont": {
                    "$ref": "#/components/schemas/path-params-test_cont",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/path-params-test_cont"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller path-params-test"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - path-params-test - cont",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller path-params-test"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - path-params-test - cont",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/path-params-test_cont"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "cont": {
                      "$ref": "#/components/schemas/path-params-test_cont",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller path-params-test"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/recursive:container-root": {
      "put": {
        "description": "",
        "summary": "PUT - recursive - Controller - container-root",
        "requestBody": {
          "description": "container-root",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "recursive:container-root": {
                    "$ref": "#/components/schemas/recursive_container-root",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/recursive_container-root"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller recursive"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - recursive - Controller - container-root",
        "requestBody": {
          "description": "container-root",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "recursive:container-root": {
                    "$ref": "#/components/schemas/recursive_container-root",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/recursive_container-root"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller recursive"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - recursive - container-root",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller recursive"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - recursive - container-root",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/recursive_container-root"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "container-root": {
                      "$ref": "#/components/schemas/recursive_container-root",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller recursive"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/string-types:test": {
      "put": {
        "description": "Tests various combinations of regex expressions found in snmp yang models,\nwhich are causing problems because of isBasicLatin expression.\n\nAccording to https://unicode.org/charts/PDF/U0000.pdf basic latin characters are in range\n0x00-0x7F ([\\x00-\\xFF] or [\\u0000-\\u00FF]). This means it should be safe to replace isBasicLatin\nin regex expressions for characters in this range.",
        "summary": "PUT - string-types - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string-types:test": {
                    "$ref": "#/components/schemas/string-types_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/string-types_test"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller string-types"
        ],
        "parameters": []
      },
      "patch": {
        "description": "Tests various combinations of regex expressions found in snmp yang models,\nwhich are causing problems because of isBasicLatin expression.\n\nAccording to https://unicode.org/charts/PDF/U0000.pdf basic latin characters are in range\n0x00-0x7F ([\\x00-\\xFF] or [\\u0000-\\u00FF]). This means it should be safe to replace isBasicLatin\nin regex expressions for characters in this range.",
        "summary": "PATCH - string-types - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "string-types:test": {
                    "$ref": "#/components/schemas/string-types_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/string-types_test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller string-types"
        ],
        "parameters": []
      },
      "delete": {
        "description": "Tests various combinations of regex expressions found in snmp yang models,\nwhich are causing problems because of isBasicLatin expression.\n\nAccording to https://unicode.org/charts/PDF/U0000.pdf basic latin characters are in range\n0x00-0x7F ([\\x00-\\xFF] or [\\u0000-\\u00FF]). This means it should be safe to replace isBasicLatin\nin regex expressions for characters in this range.",
        "summary": "DELETE - Controller - string-types - test",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller string-types"
        ],
        "parameters": []
      },
      "get": {
        "description": "Tests various combinations of regex expressions found in snmp yang models,\nwhich are causing problems because of isBasicLatin expression.\n\nAccording to https://unicode.org/charts/PDF/U0000.pdf basic latin characters are in range\n0x00-0x7F ([\\x00-\\xFF] or [\\u0000-\\u00FF]). This means it should be safe to replace isBasicLatin\nin regex expressions for characters in this range.",
        "summary": "GET - Controller - string-types - test",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/string-types_test"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "test": {
                      "$ref": "#/components/schemas/string-types_test",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller string-types"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/strings-examples-length:test": {
      "put": {
        "description": "",
        "summary": "PUT - strings-examples-length - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "strings-examples-length:test": {
                    "$ref": "#/components/schemas/strings-examples-length_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/strings-examples-length_test"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller strings-examples-length"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - strings-examples-length - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "strings-examples-length:test": {
                    "$ref": "#/components/schemas/strings-examples-length_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/strings-examples-length_test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller strings-examples-length"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - strings-examples-length - test",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller strings-examples-length"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - strings-examples-length - test",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/strings-examples-length_test"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "test": {
                      "$ref": "#/components/schemas/strings-examples-length_test",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller strings-examples-length"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/strings-from-regex:test": {
      "put": {
        "description": "",
        "summary": "PUT - strings-from-regex - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "strings-from-regex:test": {
                    "$ref": "#/components/schemas/strings-from-regex_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/strings-from-regex_test"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller strings-from-regex"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - strings-from-regex - Controller - test",
        "requestBody": {
          "description": "test",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "strings-from-regex:test": {
                    "$ref": "#/components/schemas/strings-from-regex_test",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/strings-from-regex_test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller strings-from-regex"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - strings-from-regex - test",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller strings-from-regex"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - strings-from-regex - test",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/strings-from-regex_test"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "test": {
                      "$ref": "#/components/schemas/strings-from-regex_test",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller strings-from-regex"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/test-container-childs:root-container": {
      "put": {
        "description": "",
        "summary": "PUT - test-container-childs - Controller - root-container",
        "requestBody": {
          "description": "root-container",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container": {
                    "$ref": "#/components/schemas/test-container-childs_root-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - test-container-childs - Controller - root-container",
        "requestBody": {
          "description": "root-container",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container": {
                    "$ref": "#/components/schemas/test-container-childs_root-container",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - test-container-childs - root-container",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - test-container-childs - root-container",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/test-container-childs_root-container"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-container": {
                      "$ref": "#/components/schemas/test-container-childs_root-container",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/test-container-childs:root-container-two-keys": {
      "put": {
        "description": "",
        "summary": "PUT - test-container-childs - Controller - root-container-two-keys",
        "requestBody": {
          "description": "root-container-two-keys",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container-two-keys": {
                    "$ref": "#/components/schemas/test-container-childs_root-container-two-keys",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container-two-keys"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - test-container-childs - Controller - root-container-two-keys",
        "requestBody": {
          "description": "root-container-two-keys",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container-two-keys": {
                    "$ref": "#/components/schemas/test-container-childs_root-container-two-keys",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container-two-keys"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - test-container-childs - root-container-two-keys",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - test-container-childs - root-container-two-keys",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/test-container-childs_root-container-two-keys"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-container-two-keys": {
                      "$ref": "#/components/schemas/test-container-childs_root-container-two-keys",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/test-container-childs:root-container-unique": {
      "put": {
        "description": "",
        "summary": "PUT - test-container-childs - Controller - root-container-unique",
        "requestBody": {
          "description": "root-container-unique",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container-unique": {
                    "$ref": "#/components/schemas/test-container-childs_root-container-unique",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container-unique"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - test-container-childs - Controller - root-container-unique",
        "requestBody": {
          "description": "root-container-unique",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "test-container-childs:root-container-unique": {
                    "$ref": "#/components/schemas/test-container-childs_root-container-unique",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/test-container-childs_root-container-unique"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - test-container-childs - root-container-unique",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - test-container-childs - root-container-unique",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/test-container-childs_root-container-unique"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "root-container-unique": {
                      "$ref": "#/components/schemas/test-container-childs_root-container-unique",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller test-container-childs"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/toaster:make-toast": {
      "post": {
        "description": "Make some toast.\n  The toastDone notification will be sent when\n  the toast is finished.\n  An 'in-use' error will be returned if toast\n  is already being made.\n  A 'resource-denied' error will be returned\n  if the toaster service is disabled.",
        "summary": "POST - Controller - toaster - make-toast",
        "requestBody": {
          "description": "make-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster_make-toast_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_make-toast_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC make-toast success"
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": []
      }
    },
    "/rests/operations/toaster:cancel-toast": {
      "post": {
        "description": "Stop making toast, if any is being made.\n  A 'resource-denied' error will be returned\n  if the toaster service is disabled.",
        "summary": "POST - Controller - toaster - cancel-toast",
        "requestBody": {
          "description": "cancel-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "application/xml": {
              "schema": {
                "xml": {
                  "name": "input",
                  "namespace": "http://netconfcentral.org/ns/toaster"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC cancel-toast success"
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": []
      }
    },
    "/rests/data/toaster:toaster": {
      "put": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PUT - toaster - Controller - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": []
      },
      "patch": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PATCH - toaster - Controller - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": []
      },
      "delete": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "DELETE - Controller - toaster - toaster",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": []
      },
      "get": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "GET - Controller - toaster - toaster",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/toaster_toaster"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "toaster": {
                      "$ref": "#/components/schemas/toaster_toaster",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller toaster"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/toaster2:make-toast": {
      "post": {
        "description": "Make some toast.\n  The toastDone notification will be sent when\n  the toast is finished.\n  An 'in-use' error will be returned if toast\n  is already being made.\n  A 'resource-denied' error will be returned\n  if the toaster service is disabled.",
        "summary": "POST - Controller - toaster2 - make-toast",
        "requestBody": {
          "description": "make-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster2_make-toast_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_make-toast_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC make-toast success"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      }
    },
    "/rests/operations/toaster2:cancel-toast": {
      "post": {
        "description": "Stop making toast, if any is being made.\n  A 'resource-denied' error will be returned\n  if the toaster service is disabled.",
        "summary": "POST - Controller - toaster2 - cancel-toast",
        "requestBody": {
          "description": "cancel-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "application/xml": {
              "schema": {
                "xml": {
                  "name": "input",
                  "namespace": "http://netconfcentral.org/ns/toaster2"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC cancel-toast success"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      }
    },
    "/rests/operations/toaster2:restock-toaster": {
      "post": {
        "description": "Restocks the toaster with the amount of bread specified.",
        "summary": "POST - Controller - toaster2 - restock-toaster",
        "requestBody": {
          "description": "restock-toaster_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster2_restock-toaster_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_restock-toaster_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC restock-toaster success"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      }
    },
    "/rests/data/toaster2:toaster": {
      "put": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PUT - toaster2 - Controller - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster2:toaster": {
                    "$ref": "#/components/schemas/toaster2_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_toaster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      },
      "patch": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PATCH - toaster2 - Controller - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "toaster2:toaster": {
                    "$ref": "#/components/schemas/toaster2_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_toaster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      },
      "delete": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "DELETE - Controller - toaster2 - toaster",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": []
      },
      "get": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "GET - Controller - toaster2 - toaster",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/toaster2_toaster"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "toaster": {
                      "$ref": "#/components/schemas/toaster2_toaster",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/toaster2:lst={lf1}": {
      "put": {
        "description": "",
        "summary": "PUT - toaster2 - Controller - lst",
        "requestBody": {
          "description": "lst",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster2:lst": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/toaster2_lst",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_lst"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": [
          {
            "name": "lf1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "description": "",
        "summary": "PATCH - toaster2 - Controller - lst",
        "requestBody": {
          "description": "lst",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "toaster2:lst": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/toaster2_lst",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster2_lst"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": [
          {
            "name": "lf1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - toaster2 - lst",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": [
          {
            "name": "lf1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - toaster2 - lst",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/toaster2_lst"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "lst": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/toaster2_lst",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller toaster2"
        ],
        "parameters": [
          {
            "name": "lf1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/typed-params:typed": {
      "put": {
        "description": "",
        "summary": "PUT - typed-params - Controller - typed",
        "requestBody": {
          "description": "typed",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "typed-params:typed": {
                    "$ref": "#/components/schemas/typed-params_typed",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/typed-params_typed"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller typed-params"
        ],
        "parameters": []
      },
      "patch": {
        "description": "",
        "summary": "PATCH - typed-params - Controller - typed",
        "requestBody": {
          "description": "typed",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "typed-params:typed": {
                    "$ref": "#/components/schemas/typed-params_typed",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/typed-params_typed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "Controller typed-params"
        ],
        "parameters": []
      },
      "delete": {
        "description": "",
        "summary": "DELETE - Controller - typed-params - typed",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "Controller typed-params"
        ],
        "parameters": []
      },
      "get": {
        "description": "",
        "summary": "GET - Controller - typed-params - typed",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/typed-params_typed"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "typed": {
                      "$ref": "#/components/schemas/typed-params_typed",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Controller typed-params"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "action-types_list": {
        "title": "action-types_list",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "list",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_list_list-action_input": {
        "title": "action-types_list_list-action_input",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_list_list-action_output": {
        "title": "action-types_list_list-action_output",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "output",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_container": {
        "title": "action-types_container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "container",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_container_container-action_input": {
        "title": "action-types_container_container-action_input",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_container_container-action_output": {
        "title": "action-types_container_container-action_output",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "output",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_multi-container": {
        "title": "action-types_multi-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "multi-container",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_first-container": {
        "title": "action-types_first-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "first-container",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-list": {
        "title": "action-types_nc-list",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "nc-list",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-list_nc-list-action_input": {
        "title": "action-types_nc-list_nc-list-action_input",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-list_nc-list-action_output": {
        "title": "action-types_nc-list_nc-list-action_output",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "output",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-container": {
        "title": "action-types_nc-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "nc-container",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-container_nc-container-action_input": {
        "title": "action-types_nc-container_nc-container-action_input",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "action-types_nc-container_nc-container-action_output": {
        "title": "action-types_nc-container_nc-container-action_output",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "output",
          "namespace": "urn:ietf:params:xml:ns:yang:test:action:types"
        }
      },
      "choice-test_first-container": {
        "title": "choice-test_first-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "first-container",
          "namespace": "urn:opendaylight:choice-test"
        }
      },
      "choice-test_second-container": {
        "title": "choice-test_second-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "second-container",
          "namespace": "urn:opendaylight:choice-test"
        }
      },
      "definition-test_binary-container": {
        "title": "definition-test_binary-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "binary-container",
          "namespace": "urn:definition-test"
        }
      },
      "definition-test_union-container": {
        "title": "definition-test_union-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "union-container",
          "namespace": "urn:definition-test"
        }
      },
      "definition-test_number-container": {
        "title": "definition-test_number-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "number-container",
          "namespace": "urn:definition-test"
        }
      },
      "definition-test_enum-container": {
        "title": "definition-test_enum-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "enum-container",
          "namespace": "urn:definition-test"
        }
      },
      "definition-test_network-container": {
        "title": "definition-test_network-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "network-container",
          "namespace": "urn:definition-test"
        }
      },
      "duplication-test_test-rpc_input": {
        "title": "duplication-test_test-rpc_input",
        "type": "object",
        "properties": {
          "input-leaf": {
            "description": "",
            "type": "string",
            "example": "Some input-leaf"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:duplication:test"
        }
      },
      "duplication-test_test-rpc2_input": {
        "title": "duplication-test_test-rpc2_input",
        "type": "object",
        "properties": {
          "input-leaf": {
            "description": "",
            "type": "string",
            "example": "Some input-leaf"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:duplication:test"
        }
      },
      "duplication-test_test-rpc3_input": {
        "title": "duplication-test_test-rpc3_input",
        "type": "object",
        "properties": {
          "input-leaf": {
            "description": "",
            "type": "string",
            "example": "Some input-leaf"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:test:duplication:test"
        }
      },
      "mandatory-test_root-container": {
        "title": "mandatory-test_root-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-container",
          "namespace": "http://example.com/test"
        }
      },
      "mandatory-test_root-optional-list": {
        "title": "mandatory-test_root-optional-list",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-optional-list",
          "namespace": "http://example.com/test"
        }
      },
      "mandatory-test_root-mandatory-list": {
        "title": "mandatory-test_root-mandatory-list",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-mandatory-list",
          "namespace": "http://example.com/test"
        }
      },
      "my-yang_data": {
        "title": "my-yang_data",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "data",
          "namespace": "urn:opendaylight:params:xml:ns:yang:my-yang"
        }
      },
      "path-params-test_cont": {
        "title": "path-params-test_cont",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "cont",
          "namespace": "urn:ietf:params:xml:ns:yang:test:params"
        }
      },
      "recursive_container-root": {
        "title": "recursive_container-root",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "container-root",
          "namespace": "urn:opendaylight:test:recursive"
        }
      },
      "string-types_test": {
        "title": "string-types_test",
        "type": "object",
        "description": "Tests various combinations of regex expressions found in snmp yang models,\nwhich are causing problems because of isBasicLatin expression.\n\nAccording to https://unicode.org/charts/PDF/U0000.pdf basic latin characters are in range\n0x00-0x7F ([\\x00-\\xFF] or [\\u0000-\\u00FF]). This means it should be safe to replace isBasicLatin\nin regex expressions for characters in this range.",
        "properties": {},
        "xml": {
          "name": "test",
          "namespace": "urn:ietf:params:xml:ns:yang:test:string:types"
        }
      },
      "strings-examples-length_test": {
        "title": "strings-examples-length_test",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "test",
          "namespace": "urn:ietf:params:xml:ns:yang:strings:examples"
        }
      },
      "strings-from-regex_test": {
        "title": "strings-from-regex_test",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "test",
          "namespace": "urn:ietf:params:xml:ns:yang:strings:regex"
        }
      },
      "test-container-childs_root-container": {
        "title": "test-container-childs_root-container",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-container",
          "namespace": "http://example.com/test/container/child"
        }
      },
      "test-container-childs_root-container-two-keys": {
        "title": "test-container-childs_root-container-two-keys",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-container-two-keys",
          "namespace": "http://example.com/test/container/child"
        }
      },
      "test-container-childs_root-container-unique": {
        "title": "test-container-childs_root-container-unique",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "root-container-unique",
          "namespace": "http://example.com/test/container/child"
        }
      },
      "toaster_make-toast_input": {
        "title": "toaster_make-toast_input",
        "type": "object",
        "properties": {
          "toasterDoneness": {
            "description": "This variable controls how well-done is the\n      ensuing toast. It should be on a scale of 1 to 10.\n      Toast made at 10 generally is considered unfit\n      for human consumption; toast made at 1 is warmed\n      lightly.",
            "type": "integer",
            "format": "int64",
            "default": 5,
            "example": 1
          },
          "toasterToastType": {
            "description": "This variable informs the toaster of the type of\n      material that is being toasted. The toaster\n      uses this information, combined with\n      toasterDoneness, to compute for how\n      long the material must be toasted to achieve\n      the required doneness.",
            "type": "string",
            "enum": [
              "toast-type",
              "hash-brown",
              "frozen-waffle",
              "wonder-bread",
              "wheat-bread",
              "frozen-bagel",
              "white-bread"
            ],
            "default": "wheat-bread",
            "example": "toast-type"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "http://netconfcentral.org/ns/toaster"
        }
      },
      "toaster_toaster": {
        "title": "toaster_toaster",
        "type": "object",
        "description": "Top-level container for all toaster database objects.",
        "properties": {},
        "xml": {
          "name": "toaster",
          "namespace": "http://netconfcentral.org/ns/toaster"
        }
      },
      "toaster2_make-toast_input": {
        "title": "toaster2_make-toast_input",
        "type": "object",
        "properties": {
          "toasterDoneness": {
            "description": "This variable controls how well-done is the\n      ensuing toast. It should be on a scale of 1 to 10.\n      Toast made at 10 generally is considered unfit\n      for human consumption; toast made at 1 is warmed\n      lightly.",
            "type": "integer",
            "format": "int64",
            "default": 5,
            "example": 1
          },
          "toasterToastType": {
            "description": "This variable informs the toaster of the type of\n      material that is being toasted. The toaster\n      uses this information, combined with\n      toasterDoneness, to compute for how\n      long the material must be toasted to achieve\n      the required doneness.",
            "type": "string",
            "enum": [
              "toast-type",
              "hash-brown",
              "white-bread",
              "wheat-bread",
              "wonder-bread",
              "frozen-waffle",
              "frozen-bagel"
            ],
            "default": "wheat-bread",
            "example": "toast-type"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "http://netconfcentral.org/ns/toaster2"
        }
      },
      "toaster2_restock-toaster_input": {
        "title": "toaster2_restock-toaster_input",
        "type": "object",
        "properties": {
          "amountOfBreadToStock": {
            "description": "Indicates the amount of bread to re-stock",
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "xml": {
          "name": "input",
          "namespace": "http://netconfcentral.org/ns/toaster2"
        }
      },
      "toaster2_toaster": {
        "title": "toaster2_toaster",
        "type": "object",
        "description": "Top-level container for all toaster database objects.",
        "properties": {},
        "xml": {
          "name": "toaster",
          "namespace": "http://netconfcentral.org/ns/toaster2"
        }
      },
      "toaster2_lst": {
        "title": "toaster2_lst",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "lst",
          "namespace": "http://netconfcentral.org/ns/toaster2"
        }
      },
      "typed-params_typed": {
        "title": "typed-params_typed",
        "type": "object",
        "properties": {},
        "xml": {
          "name": "typed",
          "namespace": "urn:typed-params"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}
