{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "toaster"
  },
  "servers": [
    {
      "url": "http://localhost:8181/"
    }
  ],
  "paths": {
    "/rests/data": {
      "post": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/_toaster_module"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/_toaster_module"
              }
            }
          },
          "description": "toaster_module"
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "description": "YANG version of the TOASTER-MIB.",
        "summary": "POST - Controller - toaster - toaster_module"
      }
    },
    "/rests/operations/toaster:cancel-toast": {
      "post": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "xml": {
                  "name": "input"
                }
              }
            }
          },
          "description": "cancel-toast_input"
        },
        "responses": {
          "204": {
            "description": "RPC cancel-toast success"
          }
        },
        "description": "Stop making toast, if any is being made.\nA 'resource-denied' error will be returned\nif the toaster service is disabled.",
        "summary": "POST - Controller - toaster - cancel-toast"
      }
    },
    "/rests/data/toaster:toaster": {
      "get": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "toaster": {
                      "$ref": "#/components/schemas/toaster_toaster"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/toaster_toaster"
                }
              }
            },
            "description": "200"
          }
        },
        "description": "Top-level container for all toaster database objects.",
        "summary": "GET - Controller - toaster - toaster"
      },
      "put": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          },
          "description": "toaster"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "description": "Top-level container for all toaster database objects.",
        "summary": "PUT - toaster - Controller - toaster"
      },
      "post": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          },
          "description": "toaster"
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "description": "Top-level container for all toaster database objects.",
        "summary": "POST - Controller - toaster - toaster"
      },
      "delete": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "description": "Top-level container for all toaster database objects.",
        "summary": "DELETE - Controller - toaster - toaster"
      },
      "patch": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          },
          "description": "toaster"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "description": "Top-level container for all toaster database objects.",
        "summary": "PATCH - toaster - Controller - toaster"
      }
    },
    "/rests/operations/toaster:make-toast": {
      "post": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster_make-toast_input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_make-toast_input"
              }
            }
          },
          "description": "make-toast_input"
        },
        "responses": {
          "204": {
            "description": "RPC make-toast success"
          }
        },
        "description": "Make some toast.\nThe toastDone notification will be sent when\nthe toast is finished.\nAn 'in-use' error will be returned if toast\nis already being made.\nA 'resource-denied' error will be returned\nif the toaster service is disabled.",
        "summary": "POST - Controller - toaster - make-toast"
      }
    },
    "/rests/operations/toaster:restock-toaster": {
      "post": {
        "deprecated": false,
        "tags": [
          "Controller toaster"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster_restock-toaster_input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_restock-toaster_input"
              }
            }
          },
          "description": "restock-toaster_input"
        },
        "responses": {
          "204": {
            "description": "RPC restock-toaster success"
          }
        },
        "description": "Restocks the toaster with the amount of bread specified.",
        "summary": "POST - Controller - toaster - restock-toaster"
      }
    }
  },
  "components": {
    "schemas": {
      "hash-brown": {
        "enum": [
          "hash-brown"
        ],
        "description": "Hash browned potatos.",
        "title": "hash-brown",
        "type": "string"
      },
      "toaster_make-toast_input": {
        "properties": {
          "toasterDoneness": {
            "description": "This variable controls how well-done is the\nensuing toast. It should be on a scale of 1 to 10.\nToast made at 10 generally is considered unfit\nfor human consumption; toast made at 1 is warmed\nlightly.",
            "format": "int64",
            "default": 5,
            "example": 1,
            "type": "integer"
          },
          "toasterToastType": {
            "$ref": "#/components/schemas/toast-type"
          }
        },
        "xml": {
          "name": "input"
        },
        "title": "toaster_make-toast_input",
        "type": "object"
      },
      "toast-type": {
        "enum": [
          "toast-type",
          "white-bread",
          "frozen-waffle",
          "frozen-bagel",
          "hash-brown",
          "wonder-bread",
          "wheat-bread"
        ],
        "description": "Base for all bread types supported by the toaster.\nNew bread types not listed here nay be added in the\nfuture.",
        "title": "toast-type",
        "type": "string"
      },
      "toaster_module": {
        "properties": {
          "toaster": {
            "$ref": "#/components/schemas/toaster_toaster"
          }
        },
        "description": "YANG version of the TOASTER-MIB.",
        "title": "toaster_module",
        "type": "object"
      },
      "frozen-bagel": {
        "enum": [
          "frozen-bagel"
        ],
        "description": "Frozen bagel.",
        "title": "frozen-bagel",
        "type": "string"
      },
      "toaster_restock-toaster_input": {
        "properties": {
          "amountOfBreadToStock": {
            "description": "Indicates the amount of bread to re-stock",
            "format": "int64",
            "example": 0,
            "type": "integer"
          }
        },
        "xml": {
          "name": "input"
        },
        "title": "toaster_restock-toaster_input",
        "type": "object"
      },
      "frozen-waffle": {
        "enum": [
          "frozen-waffle"
        ],
        "description": "Frozen waffle.",
        "title": "frozen-waffle",
        "type": "string"
      },
      "white-bread": {
        "enum": [
          "white-bread"
        ],
        "description": "White bread.",
        "title": "white-bread",
        "type": "string"
      },
      "wheat-bread": {
        "enum": [
          "wheat-bread"
        ],
        "description": "Wheat bread.",
        "title": "wheat-bread",
        "type": "string"
      },
      "wonder-bread": {
        "enum": [
          "wonder-bread"
        ],
        "description": "Wonder bread.",
        "title": "wonder-bread",
        "type": "string"
      },
      "toaster_toaster": {
        "properties": {
          "darknessFactor": {
            "description": "The darkness factor. Basically, the number of ms to multiple the doneness value by.",
            "format": "int64",
            "default": 1000,
            "example": 0,
            "type": "integer"
          }
        },
        "xml": {
          "name": "toaster",
          "namespace": "http://netconfcentral.org/ns/toaster"
        },
        "description": "Top-level container for all toaster database objects.",
        "title": "toaster_toaster",
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}
