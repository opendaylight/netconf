{
  "comments": [
    {
      "key": {
        "uuid": "8cad0852_3a986410",
        "filename": "netconf/sal-netconf-connector/src/main/java/org/opendaylight/netconf/sal/connect/netconf/sal/tx/AbstractWriteTx.java",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-05-22T15:34:04Z",
      "side": 1,
      "message": "this lambda is *huge*, and ...",
      "range": {
        "startLine": 195,
        "startChar": 16,
        "endLine": 195,
        "endChar": 55
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c7949c3_8f3f726c",
        "filename": "netconf/sal-netconf-connector/src/main/java/org/opendaylight/netconf/sal/connect/netconf/sal/tx/AbstractWriteTx.java",
        "patchSetId": 6
      },
      "lineNbr": 196,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-05-22T15:34:04Z",
      "side": 1,
      "message": "... this is an indication we really want a for-loop with break.\n\nSo factor out the body of onSuccess() into a separate method, which will get the results and the exception to be completed.\n\nInside just iterate the list, looking for a failure, if found setException() + return;, if not set().",
      "range": {
        "startLine": 196,
        "startChar": 63,
        "endLine": 196,
        "endChar": 84
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "575dfad6_850ab948",
        "filename": "netconf/sal-netconf-connector/src/main/java/org/opendaylight/netconf/sal/connect/netconf/sal/tx/AbstractWriteTx.java",
        "patchSetId": 6
      },
      "lineNbr": 198,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-05-22T15:34:04Z",
      "side": 1,
      "message": "this is the same check as\n\n!domRpcResult.getErrors().isEmpty()\n\njust two lines above.",
      "range": {
        "startLine": 198,
        "startChar": 28,
        "endLine": 198,
        "endChar": 73
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84c828db_bf215822",
        "filename": "restconf/restconf-nb-rfc8040/src/main/java/org/opendaylight/restconf/nb/rfc8040/rests/utils/FutureCallbackTx.java",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-05-22T15:38:55Z",
      "side": 1,
      "message": "This deserves a fat comment. Is this an open-coded Throwables.getRootCause() ? or are we looking for the first occurrence of a specific exception (and hence Throwables.getCausualChain(e) would be helpful)?",
      "range": {
        "startLine": 65,
        "startChar": 19,
        "endLine": 67,
        "endChar": 58
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c457b31_0824f707",
        "filename": "restconf/restconf-nb-rfc8040/src/main/java/org/opendaylight/restconf/nb/rfc8040/rests/utils/FutureCallbackTx.java",
        "patchSetId": 6
      },
      "lineNbr": 80,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-05-22T15:35:29Z",
      "side": 1,
      "message": "this is plain ugly. use multiple catch() statements instead of instanceof checks.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 80,
        "endChar": 13
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598c001e_e13fcf76",
        "filename": "restconf/restconf-nb-rfc8040/src/main/java/org/opendaylight/restconf/nb/rfc8040/rests/utils/FutureCallbackTx.java",
        "patchSetId": 6
      },
      "lineNbr": 80,
      "author": {
        "id": 8125
      },
      "writtenOn": "2018-05-23T11:24:10Z",
      "side": 1,
      "message": "I can t use catch statements here since Exception is generic \"static \u003cT, X extends Exception\u003e void addCallback\" and that doesn t let me to catch DOMRpcException saying \"exception is never thrown in coresponding try block\"",
      "parentUuid": "7c457b31_0824f707",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 80,
        "endChar": 13
      },
      "revId": "71c8dcde0075b23a742132016f8fe812a3aad6cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}