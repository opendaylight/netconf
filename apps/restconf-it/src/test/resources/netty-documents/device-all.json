{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "device-sim modules of RESTCONF",
    "description": "We are providing full API for configurational data which can be edited (by POST, PUT, PATCH and DELETE).\nFor operational data we only provide GET API.\n\nFor majority of request you can see only config data in examples. That's because we can show only one example\nper request. The exception when you can see operational data in example is when data are representing\noperational (config false) container with no config data in it."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8182/"
    }
  ],
  "paths": {
    "/rests/operations/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:get-schema": {
      "post": {
        "description": "This operation is used to retrieve a schema from the\nNETCONF server.\n\nPositive Response:\nThe NETCONF server returns the requested schema.\n\nNegative Response:\nIf requested schema does not exist, the <error-tag> is\n'invalid-value'.\n\nIf more than one schema matches the requested parameters, the\n<error-tag> is 'operation-failed', and <error-app-tag> is\n'data-not-unique'.",
        "summary": "POST - device-sim - ietf-netconf-monitoring - get-schema",
        "requestBody": {
          "description": "get-schema_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/ietf-netconf-monitoring_get-schema_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ietf-netconf-monitoring_get-schema_input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RPC get-schema success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_get-schema_output"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_get-schema_output"
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": []
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state": {
      "get": {
        "description": "The netconf-state container is the root of the monitoring\ndata model.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - netconf-state",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "netconf-state": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/capabilities": {
      "get": {
        "description": "Contains the list of NETCONF capabilities supported by the\nserver.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - capabilities",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_capabilities"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "capabilities": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_capabilities",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/datastores": {
      "get": {
        "description": "Contains the list of NETCONF configuration datastores.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - datastores",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "datastores": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/datastores/datastore={name}": {
      "get": {
        "description": "List of NETCONF configuration datastores supported by\nthe NETCONF server and related information.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - datastore",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "datastore": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the datastore associated with this list entry."
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/datastores/datastore={name}/locks": {
      "get": {
        "description": "The NETCONF <lock> and <partial-lock> operations allow\na client to lock specific resources in a datastore.  The\nNETCONF server will prevent changes to the locked\nresources by all sessions except the one that acquired\nthe lock(s).\n\nMonitoring information is provided for each datastore\nentry including details such as the session that acquired\nthe lock, the type of lock (global or partial) and the\nlist of locked resources.  Multiple locks per datastore\nare supported.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - locks",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore_locks"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "locks": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore_locks",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the datastore associated with this list entry."
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/schemas": {
      "get": {
        "description": "Contains the list of data model schemas supported by the\nserver.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - schemas",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "schemas": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/schemas/schema={identifier},{version},{format}": {
      "get": {
        "description": "List of data model schemas supported by the server.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - schema",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas_schema"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas_schema",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Identifier to uniquely reference the schema.  The\nidentifier is used in the <get-schema> operation and may\nbe used for other purposes such as file retrieval.\n\nFor modeling languages that support or require a data\nmodel name (e.g., YANG module name) the identifier MUST\nmatch that name.  For YANG data models, the identifier is\nthe name of the module or submodule.  In other cases, an\nidentifier such as a filename MAY be used instead."
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Version of the schema supported.  Multiple versions MAY be\nsupported simultaneously by a NETCONF server.  Each\nversion MUST be reported individually in the schema list,\ni.e., with same identifier, possibly different location,\nbut different version.\n\nFor YANG data models, version is the value of the most\nrecent YANG 'revision' statement in the module or\nsubmodule, or the empty string if no 'revision' statement\nis present."
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The data modeling language the schema is written\nin (currently xsd, yang, yin, rng, or rnc).\nFor YANG data models, 'yang' format MUST be supported and\n'yin' format MAY also be provided."
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/sessions": {
      "get": {
        "description": "The sessions container includes session-specific data for\nNETCONF management sessions.  The session list MUST include\nall currently active NETCONF sessions.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - sessions",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "sessions": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/sessions/session={session-id}": {
      "get": {
        "description": "All NETCONF sessions managed by the NETCONF server\nMUST be reported in this list.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - session",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions_session"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "session": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions_session",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "session-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Unique identifier for the session.  This value is the\nNETCONF session identifier, as defined in RFC 4741."
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/ietf-netconf-monitoring:netconf-state/statistics": {
      "get": {
        "description": "Statistical data pertaining to the NETCONF server.",
        "summary": "GET - device-sim - ietf-netconf-monitoring - statistics",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_statistics"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "statistics": {
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_statistics",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim ietf-netconf-monitoring"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount": {
      "post": {
        "description": "YANG version of the TOASTER-MIB.\n\nNote:\nIn example payload, you can see only the first data node child of the resource to be created, following the\nguidelines of RFC 8040, which allows us to create only one resource in POST request.\n",
        "summary": "POST - device-sim - toaster - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster": {
                    "$ref": "#/components/schemas/toaster_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "device-sim root"
        ],
        "parameters": []
      },
      "get": {
        "description": "Result of this GET contains data from the monitoring data model, i.e., several lists that have\ninformation about capabilities supported by the server, configuration datastores, data model schemas\nsupported by the server, some session-specific data and statistical data.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ietf-netconf-monitoring:netconf-state": {
                      "type": "object",
                      "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state"
                }
              }
            }
          }
        },
        "summary": "GET - device-sim - datastore - data",
        "tags": [
          "device-sim root"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/rests/operations/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount": {
      "get": {
        "description": "The example demonstrates only top-level container \"ietf-restconf:operations\".\nThe request returns a list of all available operations on the mounted\nhost, showcasing the structure of RPCs that can be executed.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ietf-restconf:operations": {
                      "type": "object"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "xml": {
                    "name": "operations",
                    "namespace": "urn:ietf:params:xml:ns:yang:ietf-restconf"
                  }
                }
              }
            }
          }
        },
        "summary": "GET - device-sim - datastore - operations",
        "tags": [
          "device-sim root"
        ]
      }
    },
    "/rests/operations/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/toaster:make-toast": {
      "post": {
        "description": "Make some toast.\nThe toastDone notification will be sent when\nthe toast is finished.\nAn 'in-use' error will be returned if toast\nis already being made.\nA 'resource-denied' error will be returned\nif the toaster service is disabled.",
        "summary": "POST - device-sim - toaster - make-toast",
        "requestBody": {
          "description": "make-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster_make-toast_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_make-toast_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC make-toast success"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      }
    },
    "/rests/operations/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/toaster:cancel-toast": {
      "post": {
        "description": "Stop making toast, if any is being made.\nA 'resource-denied' error will be returned\nif the toaster service is disabled.",
        "summary": "POST - device-sim - toaster - cancel-toast",
        "requestBody": {
          "description": "cancel-toast_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "application/xml": {
              "schema": {
                "xml": {
                  "name": "input",
                  "namespace": "http://netconfcentral.org/ns/toaster"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC cancel-toast success"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      }
    },
    "/rests/operations/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/toaster:restock-toaster": {
      "post": {
        "description": "Restocks the toaster with the amount of bread specified.",
        "summary": "POST - device-sim - toaster - restock-toaster",
        "requestBody": {
          "description": "restock-toaster_input",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/toaster_restock-toaster_input",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_restock-toaster_input"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "RPC restock-toaster success"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      }
    },
    "/rests/data/network-topology/topology=topology-netconf/node=device-sim/yang-ext:mount/toaster:toaster": {
      "put": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PUT - toaster - device-sim - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      },
      "patch": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "PATCH - toaster - device-sim - toaster",
        "requestBody": {
          "description": "toaster",
          "content": {
            "application/yang-data+json": {
              "schema": {
                "properties": {
                  "toaster:toaster": {
                    "$ref": "#/components/schemas/toaster_toaster",
                    "type": "object"
                  }
                }
              }
            },
            "application/yang-data+xml": {
              "schema": {
                "$ref": "#/components/schemas/toaster_toaster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      },
      "delete": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "DELETE - device-sim - toaster - toaster",
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": []
      },
      "get": {
        "description": "Top-level container for all toaster database objects.",
        "summary": "GET - device-sim - toaster - toaster",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/toaster_toaster"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "toaster": {
                      "$ref": "#/components/schemas/toaster_toaster",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device-sim toaster"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "config",
                "nonconfig",
                "all"
              ],
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ietf-netconf-monitoring_get-schema_input": {
        "title": "ietf-netconf-monitoring_get-schema_input",
        "type": "object",
        "properties": {
          "identifier": {
            "description": "Identifier for the schema list entry.",
            "type": "string",
            "example": "Some identifier"
          },
          "version": {
            "description": "Version of the schema requested.  If this parameter is not\npresent, and more than one version of the schema exists on\nthe server, a 'data-not-unique' error is returned, as\ndescribed above.",
            "type": "string",
            "example": "Some version"
          },
          "format": {
            "description": "The data modeling language of the schema.  If this\nparameter is not present, and more than one formats of\nthe schema exists on the server, a 'data-not-unique' error\nis returned, as described above.",
            "type": "string",
            "enum": [
              "schema-format",
              "rnc",
              "yin",
              "xsd",
              "rng",
              "yang"
            ],
            "example": "schema-format"
          }
        },
        "required": [
          "identifier"
        ],
        "xml": {
          "name": "input",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_get-schema_output": {
        "title": "ietf-netconf-monitoring_get-schema_output",
        "type": "object",
        "properties": {
          "data": {
            "description": "Contains the schema content. (This is unknown data, need to be filled by user.)",
            "example": {},
            "type": "object"
          }
        },
        "xml": {
          "name": "output",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state": {
        "title": "ietf-netconf-monitoring_netconf-state",
        "type": "object",
        "description": "The netconf-state container is the root of the monitoring\ndata model.",
        "properties": {
          "sessions": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions"
          },
          "capabilities": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_capabilities"
          },
          "schemas": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas"
          },
          "datastores": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores"
          },
          "statistics": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_statistics"
          }
        },
        "xml": {
          "name": "netconf-state",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_capabilities": {
        "title": "ietf-netconf-monitoring_netconf-state_capabilities",
        "type": "object",
        "description": "Contains the list of NETCONF capabilities supported by the\nserver.",
        "properties": {
          "capability": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Some capability"
            },
            "description": "List of NETCONF capabilities supported by the server."
          }
        },
        "xml": {
          "name": "capabilities",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_datastores": {
        "title": "ietf-netconf-monitoring_netconf-state_datastores",
        "type": "object",
        "description": "Contains the list of NETCONF configuration datastores.",
        "properties": {
          "datastore": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore"
            },
            "description": "List of NETCONF configuration datastores supported by\nthe NETCONF server and related information."
          }
        },
        "xml": {
          "name": "datastores",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_datastores_datastore": {
        "title": "ietf-netconf-monitoring_netconf-state_datastores_datastore",
        "type": "object",
        "description": "List of NETCONF configuration datastores supported by\nthe NETCONF server and related information.",
        "properties": {
          "name": {
            "description": "Name of the datastore associated with this list entry.",
            "type": "string",
            "enum": [
              "running",
              "candidate",
              "startup"
            ],
            "example": "running"
          },
          "locks": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore_locks"
          }
        },
        "xml": {
          "name": "datastore",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_datastores_datastore_locks": {
        "title": "ietf-netconf-monitoring_netconf-state_datastores_datastore_locks",
        "type": "object",
        "description": "The NETCONF <lock> and <partial-lock> operations allow\na client to lock specific resources in a datastore.  The\nNETCONF server will prevent changes to the locked\nresources by all sessions except the one that acquired\nthe lock(s).\n\nMonitoring information is provided for each datastore\nentry including details such as the session that acquired\nthe lock, the type of lock (global or partial) and the\nlist of locked resources.  Multiple locks per datastore\nare supported.",
        "properties": {
          "global-lock": {
            "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_datastores_datastore_locks_global-lock"
          }
        },
        "required": [
          "global-lock"
        ],
        "xml": {
          "name": "locks",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_datastores_datastore_locks_global-lock": {
        "title": "ietf-netconf-monitoring_netconf-state_datastores_datastore_locks_global-lock",
        "type": "object",
        "description": "Present if the global lock is set.",
        "properties": {
          "locked-time": {
            "description": "The date and time of when the resource was\nlocked.",
            "type": "string",
            "example": "0000-00-00T00:00:00Z",
            "minLength": 0,
            "maxLength": 2147483647
          },
          "locked-by-session": {
            "description": "The session ID of the session that has locked\nthis resource.  Both a global lock and a partial\nlock MUST contain the NETCONF session-id.\n\nIf the lock is held by a session that is not managed\nby the NETCONF server (e.g., a CLI session), a session\nid of 0 (zero) is reported.",
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "required": [
          "locked-time",
          "locked-by-session"
        ],
        "xml": {
          "name": "global-lock",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_schemas": {
        "title": "ietf-netconf-monitoring_netconf-state_schemas",
        "type": "object",
        "description": "Contains the list of data model schemas supported by the\nserver.",
        "properties": {
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_schemas_schema"
            },
            "description": "List of data model schemas supported by the server."
          }
        },
        "xml": {
          "name": "schemas",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_schemas_schema": {
        "title": "ietf-netconf-monitoring_netconf-state_schemas_schema",
        "type": "object",
        "description": "List of data model schemas supported by the server.",
        "properties": {
          "identifier": {
            "description": "Identifier to uniquely reference the schema.  The\nidentifier is used in the <get-schema> operation and may\nbe used for other purposes such as file retrieval.\n\nFor modeling languages that support or require a data\nmodel name (e.g., YANG module name) the identifier MUST\nmatch that name.  For YANG data models, the identifier is\nthe name of the module or submodule.  In other cases, an\nidentifier such as a filename MAY be used instead.",
            "type": "string",
            "example": "Some identifier"
          },
          "format": {
            "description": "The data modeling language the schema is written\nin (currently xsd, yang, yin, rng, or rnc).\nFor YANG data models, 'yang' format MUST be supported and\n'yin' format MAY also be provided.",
            "type": "string",
            "enum": [
              "schema-format",
              "rnc",
              "yin",
              "xsd",
              "rng",
              "yang"
            ],
            "example": "schema-format"
          },
          "namespace": {
            "description": "The XML namespace defined by the data model.\n\nFor YANG data models, this is the module's namespace.\nIf the list entry describes a submodule, this field\ncontains the namespace of the module to which the\nsubmodule belongs.",
            "type": "string",
            "example": "Some namespace"
          },
          "location": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NETCONF"
              ],
              "example": "NETCONF"
            },
            "description": "One or more locations from which the schema can be\nretrieved.  This list SHOULD contain at least one\nentry per schema.\n\nA schema entry may be located on a remote file system\n(e.g., reference to file system for ftp retrieval) or\nretrieved directly from a server supporting the\n<get-schema> operation (denoted by the value 'NETCONF')."
          },
          "version": {
            "description": "Version of the schema supported.  Multiple versions MAY be\nsupported simultaneously by a NETCONF server.  Each\nversion MUST be reported individually in the schema list,\ni.e., with same identifier, possibly different location,\nbut different version.\n\nFor YANG data models, version is the value of the most\nrecent YANG 'revision' statement in the module or\nsubmodule, or the empty string if no 'revision' statement\nis present.",
            "type": "string",
            "example": "Some version"
          }
        },
        "required": [
          "namespace"
        ],
        "xml": {
          "name": "schema",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_sessions": {
        "title": "ietf-netconf-monitoring_netconf-state_sessions",
        "type": "object",
        "description": "The sessions container includes session-specific data for\nNETCONF management sessions.  The session list MUST include\nall currently active NETCONF sessions.",
        "properties": {
          "session": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ietf-netconf-monitoring_netconf-state_sessions_session"
            },
            "description": "All NETCONF sessions managed by the NETCONF server\nMUST be reported in this list."
          }
        },
        "xml": {
          "name": "sessions",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_sessions_session": {
        "title": "ietf-netconf-monitoring_netconf-state_sessions_session",
        "type": "object",
        "description": "All NETCONF sessions managed by the NETCONF server\nMUST be reported in this list.",
        "properties": {
          "source-host": {
            "description": "Host identifier of the NETCONF client.  The value\nreturned is implementation specific (e.g., hostname,\nIPv4 address, IPv6 address)",
            "type": "string",
            "example": "0.0.0.0",
            "minLength": 0,
            "maxLength": 2147483647
          },
          "login-time": {
            "description": "Time at the server at which the session was established.",
            "type": "string",
            "example": "0000-00-00T00:00:00Z",
            "minLength": 0,
            "maxLength": 2147483647
          },
          "in-rpcs": {
            "description": "Number of correct <rpc> messages received.",
            "type": "string",
            "default": "0"
          },
          "out-rpc-errors": {
            "description": "Number of <rpc-reply> messages sent that contained an\n<rpc-error> element.",
            "type": "string",
            "default": "0"
          },
          "in-bad-rpcs": {
            "description": "Number of messages received when an <rpc> message was expected,\nthat were not correct <rpc> messages.  This includes XML parse\nerrors and errors on the rpc layer.",
            "type": "string",
            "default": "0"
          },
          "out-notifications": {
            "description": "Number of <notification> messages sent.",
            "type": "string",
            "default": "0"
          },
          "transport": {
            "description": "Identifies the transport for each session, e.g.,\n'netconf-ssh', 'netconf-soap', etc.",
            "type": "string",
            "enum": [
              "transport",
              "netconf-ssh",
              "netconf-tcp",
              "netconf-tls",
              "netconf-soap-over-https",
              "netconf-beep",
              "netconf-soap-over-beep"
            ],
            "example": "transport"
          },
          "odl-netconf-monitoring:session-identifier": {
            "description": "",
            "type": "string",
            "example": "Some session-identifier",
            "xml": {
              "name": "session-identifier",
              "namespace": "urn:opendaylight:params:xml:ns:yang:netconf:monitoring"
            }
          },
          "session-id": {
            "description": "Unique identifier for the session.  This value is the\nNETCONF session identifier, as defined in RFC 4741.",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "username": {
            "description": "The username is the client identity that was authenticated\nby the NETCONF transport protocol.  The algorithm used to\nderive the username is NETCONF transport protocol specific\nand in addition specific to the authentication mechanism\nused by the NETCONF transport protocol.",
            "type": "string",
            "example": "Some username"
          }
        },
        "required": [
          "login-time",
          "transport",
          "username"
        ],
        "xml": {
          "name": "session",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "ietf-netconf-monitoring_netconf-state_statistics": {
        "title": "ietf-netconf-monitoring_netconf-state_statistics",
        "type": "object",
        "description": "Statistical data pertaining to the NETCONF server.",
        "properties": {
          "netconf-start-time": {
            "description": "Date and time at which the management subsystem was\nstarted.",
            "type": "string",
            "example": "0000-00-00T00:00:00Z",
            "minLength": 0,
            "maxLength": 2147483647
          },
          "in-rpcs": {
            "description": "Number of correct <rpc> messages received.",
            "type": "string",
            "default": "0"
          },
          "in-sessions": {
            "description": "Number of sessions started.  This counter is incremented\nwhen a <hello> message with a <session-id> is sent.\n\n'in-sessions' - 'in-bad-hellos' =\n 'number of correctly started netconf sessions'",
            "type": "string",
            "default": "0"
          },
          "out-rpc-errors": {
            "description": "Number of <rpc-reply> messages sent that contained an\n<rpc-error> element.",
            "type": "string",
            "default": "0"
          },
          "in-bad-hellos": {
            "description": "Number of sessions silently dropped because an\ninvalid <hello> message was received.  This includes <hello>\nmessages with a 'session-id' attribute, bad namespace, and\nbad capability declarations.",
            "type": "string",
            "default": "0"
          },
          "in-bad-rpcs": {
            "description": "Number of messages received when an <rpc> message was expected,\nthat were not correct <rpc> messages.  This includes XML parse\nerrors and errors on the rpc layer.",
            "type": "string",
            "default": "0"
          },
          "out-notifications": {
            "description": "Number of <notification> messages sent.",
            "type": "string",
            "default": "0"
          },
          "dropped-sessions": {
            "description": "Number of sessions that were abnormally terminated, e.g.,\ndue to idle timeout or transport close.  This counter is not\nincremented when a session is properly closed by a\n<close-session> operation, or killed by a <kill-session>\noperation.",
            "type": "string",
            "default": "0"
          }
        },
        "xml": {
          "name": "statistics",
          "namespace": "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"
        }
      },
      "toaster_make-toast_input": {
        "title": "toaster_make-toast_input",
        "type": "object",
        "properties": {
          "toasterDoneness": {
            "description": "This variable controls how well-done is the\nensuing toast. It should be on a scale of 1 to 10.\nToast made at 10 generally is considered unfit\nfor human consumption; toast made at 1 is warmed\nlightly.",
            "type": "integer",
            "format": "int64",
            "default": 5,
            "example": 1
          },
          "toasterToastType": {
            "description": "This variable informs the toaster of the type of\nmaterial that is being toasted. The toaster\nuses this information, combined with\ntoasterDoneness, to compute for how\nlong the material must be toasted to achieve\nthe required doneness.",
            "type": "string",
            "enum": [
              "toast-type",
              "wheat-bread",
              "hash-brown",
              "frozen-waffle",
              "white-bread",
              "wonder-bread",
              "frozen-bagel"
            ],
            "default": "wheat-bread",
            "example": "toast-type"
          }
        },
        "xml": {
          "name": "input",
          "namespace": "http://netconfcentral.org/ns/toaster"
        }
      },
      "toaster_restock-toaster_input": {
        "title": "toaster_restock-toaster_input",
        "type": "object",
        "properties": {
          "amountOfBreadToStock": {
            "description": "Indicates the amount of bread to re-stock",
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "xml": {
          "name": "input",
          "namespace": "http://netconfcentral.org/ns/toaster"
        }
      },
      "toaster_toaster": {
        "title": "toaster_toaster",
        "type": "object",
        "description": "Top-level container for all toaster database objects.",
        "properties": {
          "darknessFactor": {
            "description": "The darkness factor. Basically, the number of ms to multiple the doneness value by.",
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "example": 0
          }
        },
        "xml": {
          "name": "toaster",
          "namespace": "http://netconfcentral.org/ns/toaster"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}
