{
  "comments": [
    {
      "key": {
        "uuid": "7a6b29fe_58b8a129",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "Check or Check out\n\nAnyway, I think the stackoverflow question you have posted is more concerned about order of modifier of one specific member, not about order of members in class according to their modifiers. I guess it says that you should write public static final boolean CONST not final public static boolean CONSt",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_38b3254e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "personally",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_d87b1179",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "refactored",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_b87e1568",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "Maybe restrict would be better",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_38e1652a",
        "filename": "netconf/sal-netconf-connector/src/main/java/org/opendaylight/netconf/sal/connect/netconf/sal/tx/AbstractWriteTx.java",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "Maybe this does not have to be public.",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_18e0e927",
        "filename": "netconf/sal-netconf-connector/src/main/java/org/opendaylight/netconf/sal/connect/netconf/sal/tx/AbstractWriteTx.java",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 4580
      },
      "writtenOn": "2016-09-22T07:59:00Z",
      "side": 1,
      "message": "Is there any point in having package private constructor but also protected abstract methods? I mean you cannot extend the class in another package because of constructor.",
      "revId": "2cf7c27db2d1ba354e766ba5c872cba318758306",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}