{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09eb4432_13181f85",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:38:55Z",
      "side": 1,
      "message": "multiple things wrong here:\n- this class only needs a Shiro SecurityManager, hence there needs to be such a constructor\n- that constructor needs to be @Inject, as this constructor only caters to OSGi (obvious from what provides AAAShiroWebEnvironment)\n- this construtor needs to just extract the security manager",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 45,
        "endChar": 5
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d942c4dc_3a1ad79f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:30:55Z",
      "side": 1,
      "message": "on success the subject needs to be remembered, as we will need to talk to its https://javadoc.io/static/org.apache.shiro/shiro-core/2.0.1/org/apache/shiro/subject/Subject.html#checkPermission(org.apache.shiro.authz.Permission) for access control (as mentioned in ServerRequest\u0027s top FIXME.\n\nthis really needs to be in place from day one.",
      "range": {
        "startLine": 57,
        "startChar": 27,
        "endLine": 57,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "767142ae_0bf86bf1",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:39:59Z",
      "side": 1,
      "message": "why protected?",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9248117_4f0468b0",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:39:59Z",
      "side": 1,
      "message": "\"Regex\" is ambiguous -- it should be \"Pattern\"\n\nbut then ... why do we needs a Pattern? JaxRsRestconf layout seems to suggest that we just needs String.startsWith() match before further deciding whether to extract an ApiPath or not...",
      "range": {
        "startLine": 26,
        "startChar": 42,
        "endLine": 26,
        "endChar": 56
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15320d70_5c015bcd",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "err... this mixes apples, oranges, carrots and onions.\n\nmethod, contentType, basePath, request, requestBody \u003d\u003d request details\ndefaultContentType \u003d\u003d ???\n\ncallback on the other hand is something to invoke at the end.\n\nis this really just an indirection over\n\nvoid invoke( requestParameters (90% of this interface), callback)\n\n?\n\nHow does this relate to ServerRequest?",
      "range": {
        "startLine": 27,
        "startChar": 10,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4ce9992_8b37182f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "examples",
      "range": {
        "startLine": 51,
        "startChar": 77,
        "endLine": 51,
        "endChar": 105
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83454ffa_17e7a506",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "i.e. is this the same thing as !contextPath.isEmpty() ?",
      "range": {
        "startLine": 65,
        "startChar": 12,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e41f7082_1beb5329",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "either this is:\n- findMatching() with findAny()\n- findFirstMatching() with findFirst()",
      "range": {
        "startLine": 25,
        "startChar": 39,
        "endLine": 25,
        "endChar": 51
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f3f72ed_bc26cea9",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "separate line",
      "range": {
        "startLine": 27,
        "startChar": 61,
        "endLine": 27,
        "endChar": 70
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54ea34ce_92847040",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "so aside from findMatching(), who is calling this method?",
      "range": {
        "startLine": 35,
        "startChar": 13,
        "endLine": 35,
        "endChar": 55
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002d73ed_ddf53158",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:51:11Z",
      "side": 1,
      "message": "sooo... basically we do first matches(context) and then execute process(server, context)?\nwhy do we want to do that in two steps?\nwhat happens if matches(context) \u003d\u003d false and but someone calls process() nevertheless?",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb5d05b6_befaf616",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:51:11Z",
      "side": 1,
      "message": "\u0027server\u0027: there is no \u0027RestconfService\u0027 and \u0027Restconf\u0027 is obvious from the context",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b13ae71d_76816b71",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "\"hidden on purpose\"\n\ndo not try to be creative in these comments which have a *very* specific context and purpose",
      "range": {
        "startLine": 29,
        "startChar": 11,
        "endLine": 29,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a18629cc_ff3bfd88",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "this is an atrocious name for a function\n\ndid you mean to say \u0027extractApiPath\u0027?\nand since this is taking a pattern and context: isn\u0027t this really what you are after with the whole RequestProcessor.matches() thing?!",
      "range": {
        "startLine": 32,
        "startChar": 19,
        "endLine": 32,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea35971_584630d7",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Matcher.html#group(int) says:\n\n    IndexOutOfBoundsException - If there is no capturing group in the pattern with the given index\n\nhow do we know there is even a capturing group?",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 49
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e68ba88_c43fd9d9",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "looking up group(1) twice, why?!",
      "range": {
        "startLine": 36,
        "startChar": 37,
        "endLine": 36,
        "endChar": 53
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "472e49d2_822c1db7",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "let\u0027s not introduce new unchecked exception in invcation path, okay?\n\nif you think about  this particular case, a ServerException is called for, isn\u0027t it?",
      "range": {
        "startLine": 39,
        "startChar": 16,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}