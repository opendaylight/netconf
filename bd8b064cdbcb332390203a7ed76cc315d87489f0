{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09eb4432_13181f85",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:38:55Z",
      "side": 1,
      "message": "multiple things wrong here:\n- this class only needs a Shiro SecurityManager, hence there needs to be such a constructor\n- that constructor needs to be @Inject, as this constructor only caters to OSGi (obvious from what provides AAAShiroWebEnvironment)\n- this construtor needs to just extract the security manager",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 45,
        "endChar": 5
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3203b299_05a0ada3",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09eb4432_13181f85",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 45,
        "endChar": 5
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d942c4dc_3a1ad79f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:30:55Z",
      "side": 1,
      "message": "on success the subject needs to be remembered, as we will need to talk to its https://javadoc.io/static/org.apache.shiro/shiro-core/2.0.1/org/apache/shiro/subject/Subject.html#checkPermission(org.apache.shiro.authz.Permission) for access control (as mentioned in ServerRequest\u0027s top FIXME.\n\nthis really needs to be in place from day one.",
      "range": {
        "startLine": 57,
        "startChar": 27,
        "endLine": 57,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0b737d3_d3bfd0fe",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AAAShiroAuthHandlerFactory.java",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "it\u0027s a new functionality which does not exist in restconf-nb.\nit should not be requirement/blocker for transport layer migration task",
      "parentUuid": "d942c4dc_3a1ad79f",
      "range": {
        "startLine": 57,
        "startChar": 27,
        "endLine": 57,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "767142ae_0bf86bf1",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:39:59Z",
      "side": 1,
      "message": "why protected?",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4d3ab6d_248d88f7",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "because it\u0027s used by inherited classes",
      "parentUuid": "767142ae_0bf86bf1",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9248117_4f0468b0",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:39:59Z",
      "side": 1,
      "message": "\"Regex\" is ambiguous -- it should be \"Pattern\"\n\nbut then ... why do we needs a Pattern? JaxRsRestconf layout seems to suggest that we just needs String.startsWith() match before further deciding whether to extract an ApiPath or not...",
      "range": {
        "startLine": 26,
        "startChar": 42,
        "endLine": 26,
        "endChar": 56
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dffec8a_e291a672",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "startsWith is not sufficient for reliable path pattern match\n`\"/datawhatever\".startsWith(\"/data\") \u003d true`",
      "parentUuid": "d9248117_4f0468b0",
      "range": {
        "startLine": 26,
        "startChar": 42,
        "endLine": 26,
        "endChar": 56
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3d6b999_cf02dfed",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-07T12:12:23Z",
      "side": 1,
      "message": "right, it starts with /data and then you proceed to decide whether it is:\n- \"/data\", i.e. the datastore\n- \"/data/\u003capiPath\u003e\u0027, i.e. a resources\n\nStill way more performant than pattern match.\n\nAlso I am serious about the variable name.",
      "parentUuid": "8dffec8a_e291a672",
      "range": {
        "startLine": 26,
        "startChar": 42,
        "endLine": 26,
        "endChar": 56
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "969be0f5_eec8dab1",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/AbstractRequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-11T10:51:10Z",
      "side": 1,
      "message": "refactored to use direct string match,\nvar name is apiResource\nmerged to RestconfProcessor which became class",
      "parentUuid": "d3d6b999_cf02dfed",
      "range": {
        "startLine": 26,
        "startChar": 42,
        "endLine": 26,
        "endChar": 56
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15320d70_5c015bcd",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "err... this mixes apples, oranges, carrots and onions.\n\nmethod, contentType, basePath, request, requestBody \u003d\u003d request details\ndefaultContentType \u003d\u003d ???\n\ncallback on the other hand is something to invoke at the end.\n\nis this really just an indirection over\n\nvoid invoke( requestParameters (90% of this interface), callback)\n\n?\n\nHow does this relate to ServerRequest?",
      "range": {
        "startLine": 27,
        "startChar": 10,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ae1aff4_bb5cfc20",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "as it says in javadoc: it aggregates request and configuration parameters, \nso we can use single parameter object in API instead of multiple\n\nrenamed to RequestParametrs for clear meaning, also converted class\n\n\u003e void invoke( requestParameters (90% of this interface), callback)\n\nit\u0027s just not true, you may also need path-api, request body, request headers,\nbase path as well\n\n\u003e How does this relate to ServerRequest?\n\nit does not. \nServerRequest is just an extra wrapper over RequestParameters\ni see no reason for this object to exist, it provides extra handling\nfor pretty print parameter which is only used for response body encoding\nand never used within RestconfServer (restonf-nb) implementation",
      "parentUuid": "15320d70_5c015bcd",
      "range": {
        "startLine": 27,
        "startChar": 10,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a9925a_63335d6f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-07T12:12:23Z",
      "side": 1,
      "message": "ServerRequest is bound to be way more, as evidenced in the FIXMEs there",
      "parentUuid": "1ae1aff4_bb5cfc20",
      "range": {
        "startLine": 27,
        "startChar": 10,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edf0f63b_b387f830",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-11T10:51:10Z",
      "side": 1,
      "message": "cannot rely on functionality which does not exist yet,\nonce service layer updated, the mapping part expected to be adopted",
      "parentUuid": "93a9925a_63335d6f",
      "range": {
        "startLine": 27,
        "startChar": 10,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4ce9992_8b37182f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "examples",
      "range": {
        "startLine": 51,
        "startChar": 77,
        "endLine": 51,
        "endChar": 105
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e47a431_f5dec12b",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4ce9992_8b37182f",
      "range": {
        "startLine": 51,
        "startChar": 77,
        "endLine": 51,
        "endChar": 105
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83454ffa_17e7a506",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:46:11Z",
      "side": 1,
      "message": "i.e. is this the same thing as !contextPath.isEmpty() ?",
      "range": {
        "startLine": 65,
        "startChar": 12,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc86fc57_09abb275",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestContext.java",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "83454ffa_17e7a506",
      "range": {
        "startLine": 65,
        "startChar": 12,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e41f7082_1beb5329",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "either this is:\n- findMatching() with findAny()\n- findFirstMatching() with findFirst()",
      "range": {
        "startLine": 25,
        "startChar": 39,
        "endLine": 25,
        "endChar": 51
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e1e4fad_b7e83460",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e41f7082_1beb5329",
      "range": {
        "startLine": 25,
        "startChar": 39,
        "endLine": 25,
        "endChar": 51
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f3f72ed_bc26cea9",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "separate line",
      "range": {
        "startLine": 27,
        "startChar": 61,
        "endLine": 27,
        "endChar": 70
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50d0b80b_c357482f",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4f3f72ed_bc26cea9",
      "range": {
        "startLine": 27,
        "startChar": 61,
        "endLine": 27,
        "endChar": 70
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54ea34ce_92847040",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:48:35Z",
      "side": 1,
      "message": "so aside from findMatching(), who is calling this method?",
      "range": {
        "startLine": 35,
        "startChar": 13,
        "endLine": 35,
        "endChar": 55
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b73d644_3f96a3c3",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestMapping.java",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "54ea34ce_92847040",
      "range": {
        "startLine": 35,
        "startChar": 13,
        "endLine": 35,
        "endChar": 55
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002d73ed_ddf53158",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:51:11Z",
      "side": 1,
      "message": "sooo... basically we do first matches(context) and then execute process(server, context)?\nwhy do we want to do that in two steps?\nwhat happens if matches(context) \u003d\u003d false and but someone calls process() nevertheless?",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17173851_a8d7ac02",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "because \n- searching for processor is lightweight operation, processing the request could be resource intensive.\n- search for processor is performed for each request, processing is invoked only if matched. so there could be thousands of matches() and single process() or even none.\n\n\u003e what happens if matches(context) \u003d\u003d false and but someone calls process() nevertheless?\n\nwhat the reason to invoke processor which is not matching the request? \nRestconfRequestDispatcher is the only place the processor invocation is expected from.",
      "parentUuid": "002d73ed_ddf53158",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9876b79b_57a715ff",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-07T12:12:23Z",
      "side": 1,
      "message": "that does not explain it: process() can indicate whether it matched the request (and processed) -- halting the search. i.e. the \"can I process this request\" is the first question implementations of process() will do and decide based on that.\n\nwe do not need a reason \"why would you\" ... answers can be \"because a bug\" or whatever -- modelling this as two intertwined calls just opens the possibility for misunderstanding/misusing the API",
      "parentUuid": "17173851_a8d7ac02",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caef55de_b3aee5d6",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-11T10:51:10Z",
      "side": 1,
      "message": "this became theological.\n\nas you properly noticed, the request processing is being performed in 2 stages:\n- finding appropriate piece of logic\n- executing it with provided parameters\n\nThe approach is also known as Strategy design pattern. Stage 1 in our case is determining the strategy based on a context. In order to make the code more simple and easier to maintain the suitable strategy is being filtered out using a predicate method, the approach also known as Specification pattern.\n\nThe question regarding someone executes wrong strategy ignoring the context just because the object has an execute() method assumes the developer is not qualified to make changes to other\u0027s code. Method exposure does not mean it should be executed \"nevertheless\". Unit tests and code review are there to prevent code vandalism like this.\n\nAnyway, the solution proposed is to use one method instead of two so the API became \"clear\". It also assumes the check for logic being suitable to request parameters  should be performed as part of main logic execution. The approach when every item is being invoked and each item decides by itself either to perform any action or not is known as Visitor design pattern. But to avoid extra invocations we need to take into account the execution result and to terminate the items iteration after one performs the action. Then Visitor suddenly became Chain of Responsibility.\n\nIn practicality design difference just means the difference of where the condition check is being called from: external logic or internal one. No difference in performance is being expected here. If design change brings no benefit then there is no reason to change it.\n\nThe issue of same regex being invoked twice while this could be avoided, this issue should be pointed directly, not covered with \"two methods are bad, one is good\" complain. This one is religion based.",
      "parentUuid": "9876b79b_57a715ff",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3473f47a_64b3b395",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-17T14:43:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "caef55de_b3aee5d6",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a4909f_76012392",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-07-17T17:48:02Z",
      "side": 1,
      "message": "I am sorry, but since we are talking theory, this boils down to TOCTOU races and API design.\n\nHaving two methods introduces an unknown element between their calls -- and thus unknown behaviour (user code in case).\n\nTOCTOU means that the second method either relies, or has to re-verify things the first method did. Theory: what if conditions change? Not the case here, but the point carries.\n\nAPI design perspective: good APIs make misuse impossible, or at least hard. That guides users towards good patterns and *MOST IMPORTANTLY* if a codepath is impossible, there can be no bugs in the implementation. Like, in this case, user not calling the check methods, etc.\n\nThis *HAS* to be fixed. Do *NOT* resolve this comment resolving the underlying issue.",
      "parentUuid": "3473f47a_64b3b395",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32832b82_91e5131c",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-07-17T18:01:34Z",
      "side": 1,
      "message": "And in terms of \"Strategy Pattern\": we do the same thing in restconf-nb: you look up a RestconfStrategy and you execute things. The difference between here and there is that RestconfStrategy lookup follows bog-standard resolve-and-talk-to pattern (just like *everything* connected to internet does), where as this code leaves it open-coded.\n\nMy point is that the dispatch is so trivial, that we can do if-then cascade (at worst) to locate the receiver that this entire indirection is useless:\n- target is RestconfServer\n- it has a fixed number of methods\n- dispatch is amenable to substrict matches\n\nSo why, in $DEITY, do we need this framework?",
      "parentUuid": "91a4909f_76012392",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401aa936_c7a13ad5",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-07-17T18:11:48Z",
      "side": 1,
      "message": "s/substrict/substring/\n\nFurther note: we are using match patterns in JaxRsRestconf because that is what JAX-RS gives us.\n\n    @PATCH\n    @Path(\"/data/{identifier:.+}\")\n    @Consumes({\n        MediaTypes.APPLICATION_YANG_DATA_XML,\n        MediaType.APPLICATION_XML,\n        MediaType.TEXT_XML\n    })\n    public void dataXmlPATCH()\n\nis really a match to:\n- method name, i.e. \"PATCH\".equals(method), subject to switch() since forever\n- match on String.startsWith(\"/data/\"): note we have nigh no overlaps in JaxRsRestconf ... do you think that is by accident or by design?\n- match of Accepts: header\n\nand a hand-off of \u003cpath\u003e.substring(6) to called method.\n\nThat dispatch can be made *A TON* of more efficiently in pure Java. Let\u0027s target that, ok?",
      "parentUuid": "32832b82_91e5131c",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb5d05b6_befaf616",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-05-31T23:51:11Z",
      "side": 1,
      "message": "\u0027server\u0027: there is no \u0027RestconfService\u0027 and \u0027Restconf\u0027 is obvious from the context",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f4ef8cf_cdb5dce4",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "it\u0027s a service, not server. \ncalling variable server confusing and misleading.\nRestconfServer of restconf-nb require to be renamed to RestconfService \nbc it describes service layer",
      "parentUuid": "fb5d05b6_befaf616",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34fa5d1e_6701cc4a",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-07T11:58:42Z",
      "side": 1,
      "message": "Two points:\n- it is the API definition of what a RESTCONF server needs to implement\n- if it becomes RestconfService, what will be the name of the API definition of what a RESTCONF client needs to implement?",
      "parentUuid": "1f4ef8cf_cdb5dce4",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b61e2db1_f4681bee",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-11T10:51:10Z",
      "side": 1,
      "message": "The only API that matters is REST API defined by specification. It guarantees our implementation will be compatible with any other. By other words our RESTCONF server should serve REST requests predictable way for any client implementation including generic HTTP clients. It also means our RESTCONF client expected to operate properly with any RESTCONF server implementation if it follows the specification.\n\nJava interface we use here (no matter how we call it and what methods we define there) has no relation to RESTCONF protocol API (which is the REST one), it contributes _nothing_ to compatibility mentioned above. This interface is for current implementation only and the only purpose is to make transport and service layers compatible. It\u0027s for internal use and for those who wants to integrate/ extend on current implementation.\n\nThe similar purpose interface (transport to service bridge) for NETCONF protocol is NetconfSessionListener interface. It\u0027s ugly, not clearly described and needs renaming/refactoring as well (as it\u0027s mentioned in FIXME there).\n\nRegarding the interface for client there is no requirement for interface the client should implement, any HTTP client could be a RESTCONF client. It does not mean we shouldn\u0027t use any. Once the RESTCONF client implements _same_ RestconfService interface then it became possible to use the client instance as a service - the way to access _any_ external RESTCONF server the way we prefer, using the API we defined for our needs. \n\nIt\u0027s absolutely same approach we use for NETCONF protocol case. The client used in topology is NetconfDeviceCommunicator which implements NetconfClientSessionListener",
      "parentUuid": "34fa5d1e_6701cc4a",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4522a1f_16a81691",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestProcessor.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-17T14:43:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b61e2db1_f4681bee",
      "range": {
        "startLine": 31,
        "startChar": 32,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b13ae71d_76816b71",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "\"hidden on purpose\"\n\ndo not try to be creative in these comments which have a *very* specific context and purpose",
      "range": {
        "startLine": 29,
        "startChar": 11,
        "endLine": 29,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2ced9f_ba518c32",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "why is it an issue?",
      "parentUuid": "b13ae71d_76816b71",
      "range": {
        "startLine": 29,
        "startChar": 11,
        "endLine": 29,
        "endChar": 24
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a18629cc_ff3bfd88",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "this is an atrocious name for a function\n\ndid you mean to say \u0027extractApiPath\u0027?\nand since this is taking a pattern and context: isn\u0027t this really what you are after with the whole RequestProcessor.matches() thing?!",
      "range": {
        "startLine": 32,
        "startChar": 19,
        "endLine": 32,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad4030d2_bb612643",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "same pattern is being used for different puproses: path match validation \nand api-path value extraction. using separate patterns is not justified, \nbecause the difference in negligible (with groups vs without)\n\nmethod renamed",
      "parentUuid": "a18629cc_ff3bfd88",
      "range": {
        "startLine": 32,
        "startChar": 19,
        "endLine": 32,
        "endChar": 26
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea35971_584630d7",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Matcher.html#group(int) says:\n\n    IndexOutOfBoundsException - If there is no capturing group in the pattern with the given index\n\nhow do we know there is even a capturing group?",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 49
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bea41f5c_61385d54",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "because we only invoke the method using patterns with groups.\nadded group count validation",
      "parentUuid": "cea35971_584630d7",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 49
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e68ba88_c43fd9d9",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "looking up group(1) twice, why?!",
      "range": {
        "startLine": 36,
        "startChar": 37,
        "endLine": 36,
        "endChar": 53
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a49a081b_2159ad28",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Updated",
      "parentUuid": "6e68ba88_c43fd9d9",
      "range": {
        "startLine": 36,
        "startChar": 37,
        "endLine": 36,
        "endChar": 53
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "472e49d2_822c1db7",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 649
      },
      "writtenOn": "2024-06-01T00:10:01Z",
      "side": 1,
      "message": "let\u0027s not introduce new unchecked exception in invcation path, okay?\n\nif you think about  this particular case, a ServerException is called for, isn\u0027t it?",
      "range": {
        "startLine": 39,
        "startChar": 16,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33b4d7db_11017619",
        "filename": "protocol/restconf-server/src/main/java/org/opendaylight/restconf/server/impl/RequestUtils.java",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 8894
      },
      "writtenOn": "2024-06-04T12:36:28Z",
      "side": 1,
      "message": "Nothing new is being introduces, it\u0027s a legacy behavior reproduces\nsee JaxRsRestconf#API_PATH_CONVERTER\n\nServerException is checked exception, which will cause necessity to add `throws` \nto API methods, bringing more complexity for no reason.",
      "parentUuid": "472e49d2_822c1db7",
      "range": {
        "startLine": 39,
        "startChar": 16,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "bd8b064cdbcb332390203a7ed76cc315d87489f0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}