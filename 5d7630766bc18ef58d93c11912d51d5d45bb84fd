{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6c06b19d_7697c1cf",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T11:06:21Z",
      "side": 1,
      "message": "Using NodeIdentifier instead of QName has no added value as we always work with: identifier.getNodeType() what is QName.\n\nIt seems that we create NodeIdentifier when creating this object and here we again go to QName.",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1e66f85_564ab558",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T11:54:54Z",
      "side": 1,
      "message": "Yeah, it\u0027s true. Probably when Robert mentioned it he meant org.opendaylight.yangtools.yang.model.api.stmt.SchemaNodeIdentifier - added value here would be path to the node. What do you think about that?",
      "parentUuid": "6c06b19d_7697c1cf",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "471020cc_58998d83",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T12:45:00Z",
      "side": 1,
      "message": "Where is that used?",
      "parentUuid": "a1e66f85_564ab558",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d94bc370_ad2af32a",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:49:18Z",
      "side": 1,
      "message": "But at the same time SubtreeFilter itself is also essentially path so also not really useful...",
      "parentUuid": "471020cc_58998d83",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75c9634e_9b470bab",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:52:32Z",
      "side": 1,
      "message": "Mainly I see it used as sort of path in EffectiveModelContext",
      "parentUuid": "d94bc370_ad2af32a",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be5db0b6_1ee2867b",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:56:29Z",
      "side": 1,
      "message": "Idk. This change not described in my task and is something that was briefly mentioned by Robert. Since it is not clear how about I revert to QNames and do it separately when there is more info?",
      "parentUuid": "75c9634e_9b470bab",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55e7715c_9821b830",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/NamespaceSelection.java",
        "patchSetId": 25
      },
      "lineNbr": 25,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-07T21:23:09Z",
      "side": 1,
      "message": "Reverted to QNames",
      "parentUuid": "be5db0b6_1ee2867b",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "835c001a_e4ff6970",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 34,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T13:08:25Z",
      "side": 1,
      "message": "please describe the algorithm used, describe what is the purpose of each method",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0381cab4_c7cf2002",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 34,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T16:04:33Z",
      "side": 1,
      "message": "Added java doc to methods",
      "parentUuid": "835c001a_e4ff6970",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b6f2050_67507a62",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 38,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T13:08:25Z",
      "side": 1,
      "message": "is this the following part?\n\u003cfilter type\u003d\"subtree\"\u003e\n\ncan you document it and verify its like that?",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09c2d11a_f258e373",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 38,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T16:04:33Z",
      "side": 1,
      "message": "Added about it into comment and doc to the method",
      "parentUuid": "9b6f2050_67507a62",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ad06f0_33cba4de",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 132,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T13:08:25Z",
      "side": 1,
      "message": "IMHO no, attribute match can be applied also for namespace wildcarded elements",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7fa7cd0_d4d45ec6",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 132,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T14:17:49Z",
      "side": 1,
      "message": "Element itself can be wildcarded but attribute also has namespace. This exception here is for one reason - AttributeMatch accepts only NamespaceSelection.Exact and therefore attributes can\u0027t be wildcard. This is something that was laid down by Robert both for `api` and `databind`. To change it here also means we need to change `api` part.\nAlso if we don\u0027t have namespace there won\u0027t be anything tying attribute to the model.\n\nIMO lets leave it for now. Even if it is wrong and we can have wildcard attributes this is requires rework in separate patch with adaptations in `api` too.",
      "parentUuid": "87ad06f0_33cba4de",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb859119_037eb505",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T13:08:25Z",
      "side": 1,
      "message": "this is for Wildcarded only?",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ac07c1f_4005867f",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 152,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T14:17:49Z",
      "side": 1,
      "message": "No it is for both types. I\u0027ll add the comment. Exact namespace is returned when there are namespaces all the way in the path. It checks for first and last nodes namespace and if we have both trying to construct Exact namespace.\n\nIMO Yes in that case if there is wildcard somewhere in between it will throw the error - I checked for that. Reason for that is that such xml has no sense - skipping namespace for the element and then \"finding\" it for the children looks like something deliberate and not logical.",
      "parentUuid": "bb859119_037eb505",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f9ebcfd_f4ca3e5c",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 268,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T11:50:34Z",
      "side": 1,
      "message": "did you mean `while`?",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "074e54a4_edab0db4",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 268,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:43:34Z",
      "side": 1,
      "message": "No, this if here to check if we reached end of path iterator and decide to return QNames or go deeper down the SchemaTree.\nAlso pls see comment below.",
      "parentUuid": "7f9ebcfd_f4ca3e5c",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9d7861_74a21c79",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 279,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T11:50:34Z",
      "side": 1,
      "message": "did you mean `while`? instead of using recursion?",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f606a14e_a2f05664",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 279,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:43:34Z",
      "side": 1,
      "message": "So I used `if` and recursion intentionally. Idea behind this was that each time we go into recursion it will deal with children of only one statement at the time then in the end on the last call in `else` it will collect QNames with the same local name we are looking for and on the way back put them into one list step by step. It was logical to me because here got down the schema tree to find node and then returning up with result.\n\nI could probably do the same using `while`, but after each loop I would have to update `found` - list of statements - to go down the schema tree. It looks less intuitive to me then recursion.",
      "parentUuid": "7e9d7861_74a21c79",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0bd3622_0de72698",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 279,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-07T21:23:09Z",
      "side": 1,
      "message": "This method was removed and logic reworked",
      "parentUuid": "f606a14e_a2f05664",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787caaf5_5cd149d8",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 283,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T11:47:28Z",
      "side": 1,
      "message": "lase one?",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f45eecf4_ff080bfa",
        "filename": "protocol/databind/src/main/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReader.java",
        "patchSetId": 25
      },
      "lineNbr": 283,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T12:58:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "787caaf5_5cd149d8",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a447585_dbfd41eb",
        "filename": "protocol/databind/src/test/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReaderTest.java",
        "patchSetId": 25
      },
      "lineNbr": 45,
      "author": {
        "id": 8144
      },
      "writtenOn": "2025-04-04T13:08:25Z",
      "side": 1,
      "message": "can you add test for multiple subtrees?\n\nhttps://www.rfc-editor.org/rfc/rfc6241#section-6.4.7",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00d52e1a_890d6f01",
        "filename": "protocol/databind/src/test/java/org/opendaylight/netconf/databind/subtree/SubtreeFilterReaderTest.java",
        "patchSetId": 25
      },
      "lineNbr": 45,
      "author": {
        "id": 9063
      },
      "writtenOn": "2025-04-04T16:04:33Z",
      "side": 1,
      "message": "Added this case",
      "parentUuid": "0a447585_dbfd41eb",
      "revId": "5d7630766bc18ef58d93c11912d51d5d45bb84fd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}